<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Polly.8.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy">
            <summary>Shim type of Polly.Bulkhead.AsyncBulkheadPolicy</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.#ctor(Polly.Bulkhead.AsyncBulkheadPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.AllInstances.BulkheadAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.AllInstances.Dispose">
            <summary>Sets the Shim of AsyncBulkheadPolicy.Dispose()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Bulkhead.AsyncBulkheadPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncBulkheadPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.AllInstances.QueueAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.Bind(Polly.Bulkhead.IBulkheadPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.BulkheadAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.ConstructorInt32Int32FuncOfContextTask">
            <summary>Sets the Shim of AsyncBulkheadPolicy.AsyncBulkheadPolicy(Int32 maxParallelization, Int32 maxQueueingActions, Func`2&lt;Context,Task&gt; onBulkheadRejectedAsync)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.Dispose">
            <summary>Sets the Shim of AsyncBulkheadPolicy.Dispose()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncBulkheadPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy.QueueAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1">
            <summary>Shim type of Polly.Bulkhead.AsyncBulkheadPolicy`1</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.#ctor(Polly.Bulkhead.AsyncBulkheadPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.AllInstances.BulkheadAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.AllInstances.Dispose">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.Dispose()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.AllInstances.QueueAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.get_QueueAvailableCount()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.Bind(Polly.Bulkhead.IBulkheadPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.Bind(Polly.Bulkhead.IBulkheadPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.BulkheadAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.ConstructorInt32Int32FuncOfContextTask">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.AsyncBulkheadPolicy`1(Int32 maxParallelization, Int32 maxQueueingActions, Func`2&lt;Context,Task&gt; onBulkheadRejectedAsync)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.Dispose">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.Dispose()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimAsyncBulkheadPolicy`1.QueueAvailableCountGet">
            <summary>Sets the Shim of AsyncBulkheadPolicy`1.get_QueueAvailableCount()</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimBulkheadPolicy">
            <summary>Shim type of Polly.Bulkhead.BulkheadPolicy</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.#ctor(Polly.Bulkhead.BulkheadPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.AllInstances.BulkheadAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.AllInstances.Dispose">
            <summary>Sets the Shim of BulkheadPolicy.Dispose()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Bulkhead.BulkheadPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of BulkheadPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.AllInstances.QueueAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.Bind(Polly.Bulkhead.IBulkheadPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.BulkheadAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.ConstructorInt32Int32ActionOfContext">
            <summary>Sets the Shim of BulkheadPolicy.BulkheadPolicy(Int32 maxParallelization, Int32 maxQueueingActions, Action`1&lt;Context&gt; onBulkheadRejected)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.Dispose">
            <summary>Sets the Shim of BulkheadPolicy.Dispose()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of BulkheadPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy.QueueAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1">
            <summary>Shim type of Polly.Bulkhead.BulkheadPolicy`1</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.#ctor(Polly.Bulkhead.BulkheadPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.AllInstances.BulkheadAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy`1.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.AllInstances.Dispose">
            <summary>Sets the Shim of BulkheadPolicy`1.Dispose()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of BulkheadPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.AllInstances.QueueAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy`1.get_QueueAvailableCount()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.Bind(Polly.Bulkhead.IBulkheadPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.Bind(Polly.Bulkhead.IBulkheadPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.BulkheadAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy`1.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.ConstructorInt32Int32ActionOfContext">
            <summary>Sets the Shim of BulkheadPolicy`1.BulkheadPolicy`1(Int32 maxParallelization, Int32 maxQueueingActions, Action`1&lt;Context&gt; onBulkheadRejected)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.Dispose">
            <summary>Sets the Shim of BulkheadPolicy`1.Dispose()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of BulkheadPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadPolicy`1.QueueAvailableCountGet">
            <summary>Sets the Shim of BulkheadPolicy`1.get_QueueAvailableCount()</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException">
            <summary>Shim type of Polly.Bulkhead.BulkheadRejectedException</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.#ctor(Polly.Bulkhead.BulkheadRejectedException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.Constructor">
            <summary>Sets the Shim of BulkheadRejectedException.BulkheadRejectedException()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.ConstructorString">
            <summary>Sets the Shim of BulkheadRejectedException.BulkheadRejectedException(String message)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.ShimBulkheadRejectedException.ConstructorStringException">
            <summary>Sets the Shim of BulkheadRejectedException.BulkheadRejectedException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.StubBulkheadRejectedException">
            <summary>Stub type of Polly.Bulkhead.BulkheadRejectedException</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubBulkheadRejectedException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubBulkheadRejectedException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.GetBaseException">
            <summary>Sets the Stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the Stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.InitializeStub">
            <summary>Initializes a new instance of type StubBulkheadRejectedException</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.ToString">
            <summary>Sets the Stub of Exception.ToString()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubBulkheadRejectedException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.StubIBulkheadPolicy">
            <summary>Stub type of Polly.Bulkhead.IBulkheadPolicy</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.#ctor">
            <summary>Initializes a new instance of type StubIBulkheadPolicy</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.Polly#Bulkhead#IBulkheadPolicy#BulkheadAvailableCount">
            <summary>Sets the stub of IBulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.BulkheadAvailableCountGet">
            <summary>Sets the stub of IBulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.Polly#Bulkhead#IBulkheadPolicy#QueueAvailableCount">
            <summary>Sets the stub of IBulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.QueueAvailableCountGet">
            <summary>Sets the stub of IBulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubIBulkheadPolicy.System#IDisposable#Dispose">
            <summary>Sets the Stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1">
            <summary>Stub type of Polly.Bulkhead.IBulkheadPolicy`1</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubIBulkheadPolicy</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.Polly#Bulkhead#IBulkheadPolicy#BulkheadAvailableCount">
            <summary>Sets the stub of IBulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.BulkheadAvailableCountGet">
            <summary>Sets the stub of IBulkheadPolicy.get_BulkheadAvailableCount()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="P:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.Polly#Bulkhead#IBulkheadPolicy#QueueAvailableCount">
            <summary>Sets the stub of IBulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="F:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.QueueAvailableCountGet">
            <summary>Sets the stub of IBulkheadPolicy.get_QueueAvailableCount()</summary>
        </member>
        <member name="M:Polly.Bulkhead.Fakes.StubIBulkheadPolicy`1.System#IDisposable#Dispose">
            <summary>Sets the Stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAbsoluteTtl">
            <summary>Shim type of Polly.Caching.AbsoluteTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAbsoluteTtl.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAbsoluteTtl.#ctor(Polly.Caching.AbsoluteTtl)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAbsoluteTtl.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAbsoluteTtl.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAbsoluteTtl.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAbsoluteTtl.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAbsoluteTtl.Bind(Polly.Caching.ITtlStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAbsoluteTtl.Bind(Polly.Caching.ITtlStrategy{System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAbsoluteTtl.ConstructorDateTimeOffset">
            <summary>Sets the Shim of AbsoluteTtl.AbsoluteTtl(DateTimeOffset absoluteExpirationTime)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncCachePolicy">
            <summary>Shim type of Polly.Caching.AsyncCachePolicy</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.#ctor(Polly.Caching.AsyncCachePolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncCachePolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncCachePolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.AsyncCachePolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncCachePolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy.ConstructorIAsyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of AsyncCachePolicy.AsyncCachePolicy(IAsyncCacheProvider asyncCacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncCachePolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncCachePolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncCachePolicy`1">
            <summary>Shim type of Polly.Caching.AsyncCachePolicy`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.#ctor(Polly.Caching.AsyncCachePolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncCachePolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.ConstructorIAsyncCacheProviderOfT0ITtlStrategyOfT0FuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of AsyncCachePolicy`1.AsyncCachePolicy`1(IAsyncCacheProvider`1&lt;!0&gt; asyncCacheProvider, ITtlStrategy`1&lt;!0&gt; ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncCachePolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncCachePolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1">
            <summary>Shim type of Polly.Caching.AsyncSerializingCacheProvider`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.#ctor(Polly.Caching.AsyncSerializingCacheProvider{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.AllInstances.PutAsyncStringObjectTtlCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`1.PutAsync(String key, Object value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.AllInstances.TryGetAsyncStringCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`1.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.Bind(Polly.Caching.IAsyncCacheProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.ConstructorIAsyncCacheProviderOfT0ICacheItemSerializerOfObjectT0">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`1.AsyncSerializingCacheProvider`1(IAsyncCacheProvider`1&lt;!0&gt; wrappedCacheProvider, ICacheItemSerializer`2&lt;Object,!0&gt; serializer)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.PutAsyncStringObjectTtlCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`1.PutAsync(String key, Object value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`1.TryGetAsyncStringCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`1.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2">
            <summary>Shim type of Polly.Caching.AsyncSerializingCacheProvider`2</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.#ctor(Polly.Caching.AsyncSerializingCacheProvider{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.AllInstances.PutAsyncStringT0TtlCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`2.PutAsync(String key, !0 value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.AllInstances.TryGetAsyncStringCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`2.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.Bind(Polly.Caching.IAsyncCacheProvider{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.ConstructorIAsyncCacheProviderOfT1ICacheItemSerializerOfT0T1">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`2.AsyncSerializingCacheProvider`2(IAsyncCacheProvider`1&lt;!1&gt; wrappedCacheProvider, ICacheItemSerializer`2&lt;!0,!1&gt; serializer)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.PutAsyncStringT0TtlCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`2.PutAsync(String key, !0 value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimAsyncSerializingCacheProvider`2.TryGetAsyncStringCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncSerializingCacheProvider`2.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimCachePolicy">
            <summary>Shim type of Polly.Caching.CachePolicy</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.#ctor(Polly.Caching.CachePolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimCachePolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy.AllInstances.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of CachePolicy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.CachePolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of CachePolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.Bind(Polly.Caching.ICachePolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy.ConstructorISyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of CachePolicy.CachePolicy(ISyncCacheProvider syncCacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of CachePolicy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of CachePolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimCachePolicy`1">
            <summary>Shim type of Polly.Caching.CachePolicy`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.#ctor(Polly.Caching.CachePolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimCachePolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of CachePolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.Bind(Polly.Caching.ICachePolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCachePolicy`1.Bind(Polly.Caching.ICachePolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy`1.ConstructorISyncCacheProviderOfT0ITtlStrategyOfT0FuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of CachePolicy`1.CachePolicy`1(ISyncCacheProvider`1&lt;!0&gt; syncCacheProvider, ITtlStrategy`1&lt;!0&gt; ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCachePolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of CachePolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimCacheProviderExtensions">
            <summary>Shim type of Polly.Caching.CacheProviderExtensions</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.AsyncForOf1IAsyncCacheProvider``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,Polly.Caching.IAsyncCacheProvider{``0}})">
            <summary>Sets the Shim of CacheProviderExtensions.AsyncFor(IAsyncCacheProvider nonGenericCacheProvider)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimCacheProviderExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.ForOf1ISyncCacheProvider``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,Polly.Caching.ISyncCacheProvider{``0}})">
            <summary>Sets the Shim of CacheProviderExtensions.For(ISyncCacheProvider nonGenericCacheProvider)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.WithSerializerOf1IAsyncCacheProviderOfM0ICacheItemSerializerOfObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ICacheItemSerializer{System.Object,``0},Polly.Caching.AsyncSerializingCacheProvider{``0}})">
            <summary>Sets the Shim of CacheProviderExtensions.WithSerializer(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ICacheItemSerializer`2&lt;Object,!!0&gt; serializer)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.WithSerializerOf1ISyncCacheProviderOfM0ICacheItemSerializerOfObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ICacheItemSerializer{System.Object,``0},Polly.Caching.SerializingCacheProvider{``0}})">
            <summary>Sets the Shim of CacheProviderExtensions.WithSerializer(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ICacheItemSerializer`2&lt;Object,!!0&gt; serializer)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.WithSerializerOf2IAsyncCacheProviderOfM1ICacheItemSerializerOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``1},Polly.Caching.ICacheItemSerializer{``0,``1},Polly.Caching.AsyncSerializingCacheProvider{``0,``1}})">
            <summary>Sets the Shim of CacheProviderExtensions.WithSerializer(IAsyncCacheProvider`1&lt;!!1&gt; cacheProvider, ICacheItemSerializer`2&lt;!!0,!!1&gt; serializer)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimCacheProviderExtensions.WithSerializerOf2ISyncCacheProviderOfM1ICacheItemSerializerOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``1},Polly.Caching.ICacheItemSerializer{``0,``1},Polly.Caching.SerializingCacheProvider{``0,``1}})">
            <summary>Sets the Shim of CacheProviderExtensions.WithSerializer(ISyncCacheProvider`1&lt;!!1&gt; cacheProvider, ICacheItemSerializer`2&lt;!!0,!!1&gt; serializer)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimContextualTtl">
            <summary>Shim type of Polly.Caching.ContextualTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimContextualTtl.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimContextualTtl.#ctor(Polly.Caching.ContextualTtl)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimContextualTtl.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimContextualTtl.AllInstances.GetTtlContextObject">
            <summary>Sets the Shim of ContextualTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimContextualTtl.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimContextualTtl.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimContextualTtl.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimContextualTtl.Bind(Polly.Caching.ITtlStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimContextualTtl.Bind(Polly.Caching.ITtlStrategy{System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimContextualTtl.Constructor">
            <summary>Sets the Shim of ContextualTtl.ContextualTtl()</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimContextualTtl.GetTtlContextObject">
            <summary>Sets the Shim of ContextualTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimContextualTtl.StaticConstructor">
            <summary>Sets the Shim of ContextualTtl.ContextualTtl()</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy">
            <summary>Shim type of Polly.Caching.DefaultCacheKeyStrategy</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.#ctor(Polly.Caching.DefaultCacheKeyStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.AllInstances.GetCacheKeyContext">
            <summary>Sets the Shim of DefaultCacheKeyStrategy.GetCacheKey(Context context)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.Bind(Polly.Caching.ICacheKeyStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.Constructor">
            <summary>Sets the Shim of DefaultCacheKeyStrategy.DefaultCacheKeyStrategy()</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.GetCacheKeyContext">
            <summary>Sets the Shim of DefaultCacheKeyStrategy.GetCacheKey(Context context)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimDefaultCacheKeyStrategy.StaticConstructor">
            <summary>Sets the Shim of DefaultCacheKeyStrategy.DefaultCacheKeyStrategy()</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimNonSlidingTtl">
            <summary>Shim type of Polly.Caching.NonSlidingTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimNonSlidingTtl.#ctor(Polly.Caching.NonSlidingTtl)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimNonSlidingTtl.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimNonSlidingTtl.AllInstances.GetTtlContextObject">
            <summary>Sets the Shim of NonSlidingTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimNonSlidingTtl.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimNonSlidingTtl.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimNonSlidingTtl.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimNonSlidingTtl.Bind(Polly.Caching.ITtlStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimNonSlidingTtl.Bind(Polly.Caching.ITtlStrategy{System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimNonSlidingTtl.ConstructorDateTimeOffset">
            <summary>Sets the Shim of NonSlidingTtl.NonSlidingTtl(DateTimeOffset absoluteExpirationTime)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimNonSlidingTtl.GetTtlContextObject">
            <summary>Sets the Shim of NonSlidingTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimRelativeTtl">
            <summary>Shim type of Polly.Caching.RelativeTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimRelativeTtl.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimRelativeTtl.#ctor(Polly.Caching.RelativeTtl)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimRelativeTtl.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimRelativeTtl.AllInstances.GetTtlContextObject">
            <summary>Sets the Shim of RelativeTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimRelativeTtl.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimRelativeTtl.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimRelativeTtl.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimRelativeTtl.Bind(Polly.Caching.ITtlStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimRelativeTtl.Bind(Polly.Caching.ITtlStrategy{System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimRelativeTtl.ConstructorTimeSpan">
            <summary>Sets the Shim of RelativeTtl.RelativeTtl(TimeSpan ttl)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimRelativeTtl.GetTtlContextObject">
            <summary>Sets the Shim of RelativeTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimResultTtl`1">
            <summary>Shim type of Polly.Caching.ResultTtl`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimResultTtl`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimResultTtl`1.#ctor(Polly.Caching.ResultTtl{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimResultTtl`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimResultTtl`1.AllInstances.GetTtlContextT0">
            <summary>Sets the Shim of ResultTtl`1.GetTtl(Context context, !0 result)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimResultTtl`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimResultTtl`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimResultTtl`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimResultTtl`1.Bind(Polly.Caching.ITtlStrategy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimResultTtl`1.ConstructorFuncOfContextT0Ttl">
            <summary>Sets the Shim of ResultTtl`1.ResultTtl`1(Func`3&lt;Context,!0,Ttl&gt; ttlFunc)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimResultTtl`1.ConstructorFuncOfT0Ttl">
            <summary>Sets the Shim of ResultTtl`1.ResultTtl`1(Func`2&lt;!0,Ttl&gt; ttlFunc)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimResultTtl`1.GetTtlContextT0">
            <summary>Sets the Shim of ResultTtl`1.GetTtl(Context context, !0 result)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimSerializingCacheProvider`1">
            <summary>Shim type of Polly.Caching.SerializingCacheProvider`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.#ctor(Polly.Caching.SerializingCacheProvider{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.AllInstances.PutStringObjectTtl">
            <summary>Sets the Shim of SerializingCacheProvider`1.Put(String key, Object value, Ttl ttl)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.AllInstances.TryGetString">
            <summary>Sets the Shim of SerializingCacheProvider`1.TryGet(String key)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.Bind(Polly.Caching.ISyncCacheProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.ConstructorISyncCacheProviderOfT0ICacheItemSerializerOfObjectT0">
            <summary>Sets the Shim of SerializingCacheProvider`1.SerializingCacheProvider`1(ISyncCacheProvider`1&lt;!0&gt; wrappedCacheProvider, ICacheItemSerializer`2&lt;Object,!0&gt; serializer)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.PutStringObjectTtl">
            <summary>Sets the Shim of SerializingCacheProvider`1.Put(String key, Object value, Ttl ttl)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`1.TryGetString">
            <summary>Sets the Shim of SerializingCacheProvider`1.TryGet(String key)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimSerializingCacheProvider`2">
            <summary>Shim type of Polly.Caching.SerializingCacheProvider`2</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.#ctor(Polly.Caching.SerializingCacheProvider{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.AllInstances.PutStringT0Ttl">
            <summary>Sets the Shim of SerializingCacheProvider`2.Put(String key, !0 value, Ttl ttl)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.AllInstances.TryGetString">
            <summary>Sets the Shim of SerializingCacheProvider`2.TryGet(String key)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.Bind(Polly.Caching.ISyncCacheProvider{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.ConstructorISyncCacheProviderOfT1ICacheItemSerializerOfT0T1">
            <summary>Sets the Shim of SerializingCacheProvider`2.SerializingCacheProvider`2(ISyncCacheProvider`1&lt;!1&gt; wrappedCacheProvider, ICacheItemSerializer`2&lt;!0,!1&gt; serializer)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.PutStringT0Ttl">
            <summary>Sets the Shim of SerializingCacheProvider`2.Put(String key, !0 value, Ttl ttl)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSerializingCacheProvider`2.TryGetString">
            <summary>Sets the Shim of SerializingCacheProvider`2.TryGet(String key)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimSlidingTtl">
            <summary>Shim type of Polly.Caching.SlidingTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSlidingTtl.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSlidingTtl.#ctor(Polly.Caching.SlidingTtl)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimSlidingTtl.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSlidingTtl.AllInstances.GetTtlContextObject">
            <summary>Sets the Shim of SlidingTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSlidingTtl.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSlidingTtl.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSlidingTtl.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSlidingTtl.Bind(Polly.Caching.ITtlStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimSlidingTtl.Bind(Polly.Caching.ITtlStrategy{System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSlidingTtl.ConstructorTimeSpan">
            <summary>Sets the Shim of SlidingTtl.SlidingTtl(TimeSpan slidingTtl)</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimSlidingTtl.GetTtlContextObject">
            <summary>Sets the Shim of SlidingTtl.GetTtl(Context context, Object result)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimTtl">
            <summary>Shim type of Polly.Caching.Ttl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimTtl.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.ShimTtl.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimTtl.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.ShimTtl.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.ShimTtl.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubAbsoluteTtl">
            <summary>Stub type of Polly.Caching.AbsoluteTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubAbsoluteTtl.#ctor(System.DateTimeOffset)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAbsoluteTtl.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubAbsoluteTtl.InitializeStub">
            <summary>Initializes a new instance of type StubAbsoluteTtl</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAbsoluteTtl.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAbsoluteTtl.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`1">
            <summary>Stub type of Polly.Caching.AsyncSerializingCacheProvider`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`1.#ctor(Polly.Caching.IAsyncCacheProvider{`0},Polly.Caching.ICacheItemSerializer{System.Object,`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`1.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncSerializingCacheProvider</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`2">
            <summary>Stub type of Polly.Caching.AsyncSerializingCacheProvider`2</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`2.#ctor(Polly.Caching.IAsyncCacheProvider{`1},Polly.Caching.ICacheItemSerializer{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`2.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncSerializingCacheProvider</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubAsyncSerializingCacheProvider`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubContextualTtl">
            <summary>Stub type of Polly.Caching.ContextualTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubContextualTtl.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubContextualTtl.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubContextualTtl.InitializeStub">
            <summary>Initializes a new instance of type StubContextualTtl</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubContextualTtl.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubContextualTtl.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubDefaultCacheKeyStrategy">
            <summary>Stub type of Polly.Caching.DefaultCacheKeyStrategy</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubDefaultCacheKeyStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubDefaultCacheKeyStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubDefaultCacheKeyStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultCacheKeyStrategy</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubDefaultCacheKeyStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubDefaultCacheKeyStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubIAsyncCacheProvider">
            <summary>Stub type of Polly.Caching.IAsyncCacheProvider</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubIAsyncCacheProvider.#ctor">
            <summary>Initializes a new instance of type StubIAsyncCacheProvider</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubIAsyncCacheProvider.Polly#Caching#IAsyncCacheProvider#PutAsync(System.String,System.Object,Polly.Caching.Ttl,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncCacheProvider.PutAsync(String key, Object value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubIAsyncCacheProvider.Polly#Caching#IAsyncCacheProvider#TryGetAsync(System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncCacheProvider.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubIAsyncCacheProvider.PutAsyncStringObjectTtlCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncCacheProvider.PutAsync(String key, Object value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubIAsyncCacheProvider.TryGetAsyncStringCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncCacheProvider.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubIAsyncCacheProvider`1">
            <summary>Stub type of Polly.Caching.IAsyncCacheProvider`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubIAsyncCacheProvider`1.#ctor">
            <summary>Initializes a new instance of type StubIAsyncCacheProvider</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubIAsyncCacheProvider`1.Polly#Caching#IAsyncCacheProvider{TResult}#PutAsync(System.String,`0,Polly.Caching.Ttl,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncCacheProvider`1.PutAsync(String key, !0 value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubIAsyncCacheProvider`1.Polly#Caching#IAsyncCacheProvider{TResult}#TryGetAsync(System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncCacheProvider`1.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubIAsyncCacheProvider`1.PutAsyncStringT0TtlCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncCacheProvider`1.PutAsync(String key, !0 value, Ttl ttl, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubIAsyncCacheProvider`1.TryGetAsyncStringCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncCacheProvider`1.TryGetAsync(String key, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubICacheItemSerializer`2">
            <summary>Stub type of Polly.Caching.ICacheItemSerializer`2</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubICacheItemSerializer`2.#ctor">
            <summary>Initializes a new instance of type StubICacheItemSerializer</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubICacheItemSerializer`2.DeserializeT1">
            <summary>Sets the stub of ICacheItemSerializer`2.Deserialize(!1 objectToDeserialize)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubICacheItemSerializer`2.Polly#Caching#ICacheItemSerializer{TResult,TSerialized}#Deserialize(`1)">
            <summary>Sets the Stub of ICacheItemSerializer`2.Deserialize(!1 objectToDeserialize)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubICacheItemSerializer`2.Polly#Caching#ICacheItemSerializer{TResult,TSerialized}#Serialize(`0)">
            <summary>Sets the Stub of ICacheItemSerializer`2.Serialize(!0 objectToSerialize)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubICacheItemSerializer`2.SerializeT0">
            <summary>Sets the stub of ICacheItemSerializer`2.Serialize(!0 objectToSerialize)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubICacheKeyStrategy">
            <summary>Stub type of Polly.Caching.ICacheKeyStrategy</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubICacheKeyStrategy.#ctor">
            <summary>Initializes a new instance of type StubICacheKeyStrategy</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubICacheKeyStrategy.GetCacheKeyContext">
            <summary>Sets the stub of ICacheKeyStrategy.GetCacheKey(Context context)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubICacheKeyStrategy.Polly#Caching#ICacheKeyStrategy#GetCacheKey(Polly.Context)">
            <summary>Sets the Stub of ICacheKeyStrategy.GetCacheKey(Context context)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubICachePolicy">
            <summary>Stub type of Polly.Caching.ICachePolicy</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubICachePolicy.#ctor">
            <summary>Initializes a new instance of type StubICachePolicy</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubICachePolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubICachePolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubICachePolicy`1">
            <summary>Stub type of Polly.Caching.ICachePolicy`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubICachePolicy`1.#ctor">
            <summary>Initializes a new instance of type StubICachePolicy</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubICachePolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubICachePolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubISyncCacheProvider">
            <summary>Stub type of Polly.Caching.ISyncCacheProvider</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubISyncCacheProvider.#ctor">
            <summary>Initializes a new instance of type StubISyncCacheProvider</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubISyncCacheProvider.Polly#Caching#ISyncCacheProvider#Put(System.String,System.Object,Polly.Caching.Ttl)">
            <summary>Sets the Stub of ISyncCacheProvider.Put(String key, Object value, Ttl ttl)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubISyncCacheProvider.Polly#Caching#ISyncCacheProvider#TryGet(System.String)">
            <summary>Sets the Stub of ISyncCacheProvider.TryGet(String key)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubISyncCacheProvider.PutStringObjectTtl">
            <summary>Sets the stub of ISyncCacheProvider.Put(String key, Object value, Ttl ttl)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubISyncCacheProvider.TryGetString">
            <summary>Sets the stub of ISyncCacheProvider.TryGet(String key)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubISyncCacheProvider`1">
            <summary>Stub type of Polly.Caching.ISyncCacheProvider`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubISyncCacheProvider`1.#ctor">
            <summary>Initializes a new instance of type StubISyncCacheProvider</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubISyncCacheProvider`1.Polly#Caching#ISyncCacheProvider{TResult}#Put(System.String,`0,Polly.Caching.Ttl)">
            <summary>Sets the Stub of ISyncCacheProvider`1.Put(String key, !0 value, Ttl ttl)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubISyncCacheProvider`1.Polly#Caching#ISyncCacheProvider{TResult}#TryGet(System.String)">
            <summary>Sets the Stub of ISyncCacheProvider`1.TryGet(String key)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubISyncCacheProvider`1.PutStringT0Ttl">
            <summary>Sets the stub of ISyncCacheProvider`1.Put(String key, !0 value, Ttl ttl)</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubISyncCacheProvider`1.TryGetString">
            <summary>Sets the stub of ISyncCacheProvider`1.TryGet(String key)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubITtlStrategy">
            <summary>Stub type of Polly.Caching.ITtlStrategy</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubITtlStrategy.#ctor">
            <summary>Initializes a new instance of type StubITtlStrategy</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubITtlStrategy.GetTtlContextObject">
            <summary>Sets the stub of ITtlStrategy`1.GetTtl(Context context, !0 result)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubITtlStrategy.Polly#Caching#ITtlStrategy{System#Object}#GetTtl(Polly.Context,System.Object)">
            <summary>Sets the Stub of ITtlStrategy`1.GetTtl(Context context, !0 result)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubITtlStrategy`1">
            <summary>Stub type of Polly.Caching.ITtlStrategy`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubITtlStrategy`1.#ctor">
            <summary>Initializes a new instance of type StubITtlStrategy</summary>
        </member>
        <member name="F:Polly.Caching.Fakes.StubITtlStrategy`1.GetTtlContextT0">
            <summary>Sets the stub of ITtlStrategy`1.GetTtl(Context context, !0 result)</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubITtlStrategy`1.Polly#Caching#ITtlStrategy{TResult}#GetTtl(Polly.Context,`0)">
            <summary>Sets the Stub of ITtlStrategy`1.GetTtl(Context context, !0 result)</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubNonSlidingTtl">
            <summary>Stub type of Polly.Caching.NonSlidingTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubNonSlidingTtl.#ctor(System.DateTimeOffset)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubNonSlidingTtl.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubNonSlidingTtl.InitializeStub">
            <summary>Initializes a new instance of type StubNonSlidingTtl</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubNonSlidingTtl.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubNonSlidingTtl.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubRelativeTtl">
            <summary>Stub type of Polly.Caching.RelativeTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubRelativeTtl.#ctor(System.TimeSpan)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubRelativeTtl.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubRelativeTtl.InitializeStub">
            <summary>Initializes a new instance of type StubRelativeTtl</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubRelativeTtl.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubRelativeTtl.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubResultTtl`1">
            <summary>Stub type of Polly.Caching.ResultTtl`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubResultTtl`1.#ctor(System.Func{`0,Polly.Caching.Ttl})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubResultTtl`1.#ctor(System.Func{Polly.Context,`0,Polly.Caching.Ttl})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubResultTtl`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubResultTtl`1.InitializeStub">
            <summary>Initializes a new instance of type StubResultTtl</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubResultTtl`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubResultTtl`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubSerializingCacheProvider`1">
            <summary>Stub type of Polly.Caching.SerializingCacheProvider`1</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubSerializingCacheProvider`1.#ctor(Polly.Caching.ISyncCacheProvider{`0},Polly.Caching.ICacheItemSerializer{System.Object,`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSerializingCacheProvider`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubSerializingCacheProvider`1.InitializeStub">
            <summary>Initializes a new instance of type StubSerializingCacheProvider</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSerializingCacheProvider`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSerializingCacheProvider`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubSerializingCacheProvider`2">
            <summary>Stub type of Polly.Caching.SerializingCacheProvider`2</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubSerializingCacheProvider`2.#ctor(Polly.Caching.ISyncCacheProvider{`1},Polly.Caching.ICacheItemSerializer{`0,`1})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSerializingCacheProvider`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubSerializingCacheProvider`2.InitializeStub">
            <summary>Initializes a new instance of type StubSerializingCacheProvider</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSerializingCacheProvider`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSerializingCacheProvider`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Caching.Fakes.StubSlidingTtl">
            <summary>Stub type of Polly.Caching.SlidingTtl</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubSlidingTtl.#ctor(System.TimeSpan)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSlidingTtl.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Caching.Fakes.StubSlidingTtl.InitializeStub">
            <summary>Initializes a new instance of type StubSlidingTtl</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSlidingTtl.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Caching.Fakes.StubSlidingTtl.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy">
            <summary>Shim type of Polly.CircuitBreaker.AsyncCircuitBreakerPolicy</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.#ctor(Polly.CircuitBreaker.AsyncCircuitBreakerPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.AllInstances.CircuitStateGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.CircuitBreaker.AsyncCircuitBreakerPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.AllInstances.Isolate">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.AllInstances.LastExceptionGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.AllInstances.Reset">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.Bind(Polly.CircuitBreaker.ICircuitBreakerPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.CircuitStateGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.Isolate">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.LastExceptionGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy.Reset">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1">
            <summary>Shim type of Polly.CircuitBreaker.AsyncCircuitBreakerPolicy`1</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.#ctor(Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.AllInstances.CircuitStateGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.get_CircuitState()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.AllInstances.Isolate">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.AllInstances.LastExceptionGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.AllInstances.LastHandledResultGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.get_LastHandledResult()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.AllInstances.Reset">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.Reset()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.Bind(Polly.CircuitBreaker.ICircuitBreakerPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.Bind(Polly.CircuitBreaker.ICircuitBreakerPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.CircuitStateGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.get_CircuitState()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.Isolate">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.LastExceptionGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.LastHandledResultGet">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.get_LastHandledResult()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimAsyncCircuitBreakerPolicy`1.Reset">
            <summary>Sets the Shim of AsyncCircuitBreakerPolicy`1.Reset()</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1">
            <summary>Shim type of Polly.CircuitBreaker.BrokenCircuitException`1</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.#ctor(Polly.CircuitBreaker.BrokenCircuitException{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.AllInstances.ResultGet">
            <summary>Sets the Shim of BrokenCircuitException`1.get_Result()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the Shim of BrokenCircuitException`1.BrokenCircuitException`1(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.ConstructorStringExceptionT0">
            <summary>Sets the Shim of BrokenCircuitException`1.BrokenCircuitException`1(String message, Exception inner, !0 result)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.ConstructorStringT0">
            <summary>Sets the Shim of BrokenCircuitException`1.BrokenCircuitException`1(String message, !0 result)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.ConstructorT0">
            <summary>Sets the Shim of BrokenCircuitException`1.BrokenCircuitException`1(!0 result)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimBrokenCircuitException`1.ResultGet">
            <summary>Sets the Shim of BrokenCircuitException`1.get_Result()</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy">
            <summary>Shim type of Polly.CircuitBreaker.CircuitBreakerPolicy</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.#ctor(Polly.CircuitBreaker.CircuitBreakerPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.AllInstances.CircuitStateGet">
            <summary>Sets the Shim of CircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.CircuitBreaker.CircuitBreakerPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of CircuitBreakerPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.AllInstances.Isolate">
            <summary>Sets the Shim of CircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.AllInstances.LastExceptionGet">
            <summary>Sets the Shim of CircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.AllInstances.Reset">
            <summary>Sets the Shim of CircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.Bind(Polly.CircuitBreaker.ICircuitBreakerPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.CircuitStateGet">
            <summary>Sets the Shim of CircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of CircuitBreakerPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.Isolate">
            <summary>Sets the Shim of CircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.LastExceptionGet">
            <summary>Sets the Shim of CircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy.Reset">
            <summary>Sets the Shim of CircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1">
            <summary>Shim type of Polly.CircuitBreaker.CircuitBreakerPolicy`1</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.#ctor(Polly.CircuitBreaker.CircuitBreakerPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.AllInstances.CircuitStateGet">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.get_CircuitState()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.AllInstances.Isolate">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.AllInstances.LastExceptionGet">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.AllInstances.LastHandledResultGet">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.get_LastHandledResult()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.AllInstances.Reset">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.Reset()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.Bind(Polly.CircuitBreaker.ICircuitBreakerPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.Bind(Polly.CircuitBreaker.ICircuitBreakerPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.CircuitStateGet">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.get_CircuitState()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.Isolate">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.LastExceptionGet">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.LastHandledResultGet">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.get_LastHandledResult()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.ShimCircuitBreakerPolicy`1.Reset">
            <summary>Sets the Shim of CircuitBreakerPolicy`1.Reset()</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1">
            <summary>Stub type of Polly.CircuitBreaker.BrokenCircuitException`1</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.#ctor(`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.#ctor(System.String,`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.#ctor(System.String,System.Exception,`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubBrokenCircuitException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubBrokenCircuitException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.GetBaseException">
            <summary>Sets the Stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the Stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.InitializeStub">
            <summary>Initializes a new instance of type StubBrokenCircuitException</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.ToString">
            <summary>Sets the Stub of Exception.ToString()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubBrokenCircuitException`1.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy">
            <summary>Stub type of Polly.CircuitBreaker.ICircuitBreakerPolicy</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.#ctor">
            <summary>Initializes a new instance of type StubICircuitBreakerPolicy</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.Polly#CircuitBreaker#ICircuitBreakerPolicy#CircuitState">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.CircuitStateGet">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.Isolate">
            <summary>Sets the stub of ICircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.Polly#CircuitBreaker#ICircuitBreakerPolicy#LastException">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.LastExceptionGet">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.Polly#CircuitBreaker#ICircuitBreakerPolicy#Isolate">
            <summary>Sets the Stub of ICircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.Polly#CircuitBreaker#ICircuitBreakerPolicy#Reset">
            <summary>Sets the Stub of ICircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy.Reset">
            <summary>Sets the stub of ICircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="T:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1">
            <summary>Stub type of Polly.CircuitBreaker.ICircuitBreakerPolicy`1</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubICircuitBreakerPolicy</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Polly#CircuitBreaker#ICircuitBreakerPolicy#CircuitState">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.CircuitStateGet">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_CircuitState()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Isolate">
            <summary>Sets the stub of ICircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Polly#CircuitBreaker#ICircuitBreakerPolicy#LastException">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.LastExceptionGet">
            <summary>Sets the stub of ICircuitBreakerPolicy.get_LastException()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Polly#CircuitBreaker#ICircuitBreakerPolicy{TResult}#LastHandledResult">
            <summary>Sets the stub of ICircuitBreakerPolicy`1.get_LastHandledResult()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.LastHandledResultGet">
            <summary>Sets the stub of ICircuitBreakerPolicy`1.get_LastHandledResult()</summary>
        </member>
        <member name="P:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Polly#CircuitBreaker#ICircuitBreakerPolicy#Isolate">
            <summary>Sets the Stub of ICircuitBreakerPolicy.Isolate()</summary>
        </member>
        <member name="M:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Polly#CircuitBreaker#ICircuitBreakerPolicy#Reset">
            <summary>Sets the Stub of ICircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="F:Polly.CircuitBreaker.Fakes.StubICircuitBreakerPolicy`1.Reset">
            <summary>Sets the stub of ICircuitBreakerPolicy.Reset()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax">
            <summary>Shim type of Polly.AdvancedCircuitBreakerSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerPolicyBuilderDoubleTimeSpanInt32TimeSpan">
            <summary>Sets the Shim of AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionCircuitStateTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`4&lt;Exception,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanAction">
            <summary>Sets the Shim of AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanActionAction">
            <summary>Sets the Shim of AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContext">
            <summary>Sets the Shim of AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax">
            <summary>Shim type of Polly.AdvancedCircuitBreakerTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0CircuitStateTimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},Polly.CircuitBreaker.CircuitState,System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`4&lt;DelegateResult`1&lt;!!0&gt;,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanActionAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAdvancedCircuitBreakerTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax">
            <summary>Shim type of Polly.AsyncAdvancedCircuitBreakerSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsyncPolicyBuilderDoubleTimeSpanInt32TimeSpan">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsyncPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionCircuitStateTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`4&lt;Exception,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsyncPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanAction">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsyncPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanActionAction">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsyncPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContext">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsyncPolicyBuilderDoubleTimeSpanInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax">
            <summary>Shim type of Polly.AsyncAdvancedCircuitBreakerTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsyncOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsyncOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0CircuitStateTimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},Polly.CircuitBreaker.CircuitState,System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`4&lt;DelegateResult`1&lt;!!0&gt;,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsyncOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsyncOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanActionAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsyncOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsyncOf1PolicyBuilderOfM0DoubleTimeSpanInt32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncAdvancedCircuitBreakerTResultSyntax.AdvancedCircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Double failureThreshold, TimeSpan samplingDuration, Int32 minimumThroughput, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncAdvancedCircuitBreakerTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncCircuitBreakerSyntax">
            <summary>Shim type of Polly.AsyncCircuitBreakerSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.CircuitBreakerAsyncPolicyBuilderInt32TimeSpan">
            <summary>Sets the Shim of AsyncCircuitBreakerSyntax.CircuitBreakerAsync(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.CircuitBreakerAsyncPolicyBuilderInt32TimeSpanActionOfExceptionCircuitStateTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of AsyncCircuitBreakerSyntax.CircuitBreakerAsync(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4&lt;Exception,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.CircuitBreakerAsyncPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanAction">
            <summary>Sets the Shim of AsyncCircuitBreakerSyntax.CircuitBreakerAsync(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.CircuitBreakerAsyncPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanActionAction">
            <summary>Sets the Shim of AsyncCircuitBreakerSyntax.CircuitBreakerAsync(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.CircuitBreakerAsyncPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContext">
            <summary>Sets the Shim of AsyncCircuitBreakerSyntax.CircuitBreakerAsync(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerSyntax.CircuitBreakerAsyncPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of AsyncCircuitBreakerSyntax.CircuitBreakerAsync(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax">
            <summary>Shim type of Polly.AsyncCircuitBreakerTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.CircuitBreakerAsyncOf1PolicyBuilderOfM0Int32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerTResultSyntax.CircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.CircuitBreakerAsyncOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0CircuitStateTimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},Polly.CircuitBreaker.CircuitState,System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerTResultSyntax.CircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4&lt;DelegateResult`1&lt;!!0&gt;,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.CircuitBreakerAsyncOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerTResultSyntax.CircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.CircuitBreakerAsyncOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanActionAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerTResultSyntax.CircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.CircuitBreakerAsyncOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerTResultSyntax.CircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncCircuitBreakerTResultSyntax.CircuitBreakerAsyncOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.AsyncCircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of AsyncCircuitBreakerTResultSyntax.CircuitBreakerAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncFallbackSyntax">
            <summary>Shim type of Polly.AsyncFallbackSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncFallbackSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncFallbackSyntax.FallbackAsyncPolicyBuilderFuncOfCancellationTokenTask">
            <summary>Sets the Shim of AsyncFallbackSyntax.FallbackAsync(PolicyBuilder policyBuilder, Func`2&lt;CancellationToken,Task&gt; fallbackAction)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncFallbackSyntax.FallbackAsyncPolicyBuilderFuncOfCancellationTokenTaskFuncOfExceptionTask">
            <summary>Sets the Shim of AsyncFallbackSyntax.FallbackAsync(PolicyBuilder policyBuilder, Func`2&lt;CancellationToken,Task&gt; fallbackAction, Func`2&lt;Exception,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncFallbackSyntax.FallbackAsyncPolicyBuilderFuncOfContextCancellationTokenTaskFuncOfExceptionContextTask">
            <summary>Sets the Shim of AsyncFallbackSyntax.FallbackAsync(PolicyBuilder policyBuilder, Func`3&lt;Context,CancellationToken,Task&gt; fallbackAction, Func`3&lt;Exception,Context,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncFallbackSyntax.FallbackAsyncPolicyBuilderFuncOfExceptionContextCancellationTokenTaskFuncOfExceptionContextTask">
            <summary>Sets the Shim of AsyncFallbackSyntax.FallbackAsync(PolicyBuilder policyBuilder, Func`4&lt;Exception,Context,CancellationToken,Task&gt; fallbackAction, Func`3&lt;Exception,Context,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncFallbackTResultSyntax">
            <summary>Shim type of Polly.AsyncFallbackTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncFallbackTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.FallbackAsyncOf1PolicyBuilderOfM0FuncOfCancellationTokenTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Fallback.AsyncFallbackPolicy{``0}})">
            <summary>Sets the Shim of AsyncFallbackTResultSyntax.FallbackAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; fallbackAction)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.FallbackAsyncOf1PolicyBuilderOfM0FuncOfCancellationTokenTaskOfM0FuncOfDelegateResultOfM0Task``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Polly.DelegateResult{``0},System.Threading.Tasks.Task},Polly.Fallback.AsyncFallbackPolicy{``0}})">
            <summary>Sets the Shim of AsyncFallbackTResultSyntax.FallbackAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; fallbackAction, Func`2&lt;DelegateResult`1&lt;!!0&gt;,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.FallbackAsyncOf1PolicyBuilderOfM0FuncOfContextCancellationTokenTaskOfM0FuncOfDelegateResultOfM0ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Polly.DelegateResult{``0},Polly.Context,System.Threading.Tasks.Task},Polly.Fallback.AsyncFallbackPolicy{``0}})">
            <summary>Sets the Shim of AsyncFallbackTResultSyntax.FallbackAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; fallbackAction, Func`3&lt;DelegateResult`1&lt;!!0&gt;,Context,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.FallbackAsyncOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0ContextCancellationTokenTaskOfM0FuncOfDelegateResultOfM0ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{Polly.DelegateResult{``0},Polly.Context,System.Threading.Tasks.Task},Polly.Fallback.AsyncFallbackPolicy{``0}})">
            <summary>Sets the Shim of AsyncFallbackTResultSyntax.FallbackAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;DelegateResult`1&lt;!!0&gt;,Context,CancellationToken,Task`1&lt;!!0&gt;&gt; fallbackAction, Func`3&lt;DelegateResult`1&lt;!!0&gt;,Context,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.FallbackAsyncOf1PolicyBuilderOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},``0,Polly.Fallback.AsyncFallbackPolicy{``0}})">
            <summary>Sets the Shim of AsyncFallbackTResultSyntax.FallbackAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, !!0 fallbackValue)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.FallbackAsyncOf1PolicyBuilderOfM0M0FuncOfDelegateResultOfM0ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},``0,System.Func{Polly.DelegateResult{``0},Polly.Context,System.Threading.Tasks.Task},Polly.Fallback.AsyncFallbackPolicy{``0}})">
            <summary>Sets the Shim of AsyncFallbackTResultSyntax.FallbackAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, !!0 fallbackValue, Func`3&lt;DelegateResult`1&lt;!!0&gt;,Context,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncFallbackTResultSyntax.FallbackAsyncOf1PolicyBuilderOfM0M0FuncOfDelegateResultOfM0Task``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},``0,System.Func{Polly.DelegateResult{``0},System.Threading.Tasks.Task},Polly.Fallback.AsyncFallbackPolicy{``0}})">
            <summary>Sets the Shim of AsyncFallbackTResultSyntax.FallbackAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, !!0 fallbackValue, Func`2&lt;DelegateResult`1&lt;!!0&gt;,Task&gt; onFallbackAsync)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncPolicy">
            <summary>Shim type of Polly.AsyncPolicy</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.#ctor(Polly.AsyncPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfContextTaskContext">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfContextTaskIDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncFuncOfTask">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfContextTaskOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfContextTaskOfM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAndCaptureAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfCancellationTokenTaskCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfCancellationTokenTaskCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfContextTaskContext">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfContextTaskIDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncFuncOfTask">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfContextTaskOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfContextTaskOfM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.ExecuteAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.PollyIAsyncPolicyWithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy.Polly.IAsyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.WithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.AllInstances.WrapAsyncIAsyncPolicy">
            <summary>Sets the Shim of AsyncPolicy.WrapAsync(IAsyncPolicy innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.AllInstances.WrapAsyncOf1IAsyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.AsyncPolicy,Polly.IAsyncPolicy{``0},Polly.Wrap.AsyncPolicyWrap{``0}})">
            <summary>Sets the Shim of AsyncPolicy.WrapAsync(IAsyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ConstructorExceptionPredicates">
            <summary>Sets the Shim of AsyncPolicy.AsyncPolicy(ExceptionPredicates exceptionPredicates)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ConstructorPolicyBuilder">
            <summary>Sets the Shim of AsyncPolicy.AsyncPolicy(PolicyBuilder policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextTaskContext">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextTaskIDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncFuncOfTask">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextTaskOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextTaskOfM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfCancellationTokenTaskCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfCancellationTokenTaskCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfContextTaskContext">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfContextTaskIDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncFuncOfTask">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfContextTaskOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfContextTaskOfM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.ExecuteAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicy.ExecuteAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.PollyIAsyncPolicyWithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy.Polly.IAsyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.WithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy.WrapAsyncIAsyncPolicy">
            <summary>Sets the Shim of AsyncPolicy.WrapAsync(IAsyncPolicy innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy.WrapAsyncOf1IAsyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.IAsyncPolicy{``0},Polly.Wrap.AsyncPolicyWrap{``0}})">
            <summary>Sets the Shim of AsyncPolicy.WrapAsync(IAsyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncPolicy`1">
            <summary>Shim type of Polly.AsyncPolicy`1</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy`1.#ctor(Polly.AsyncPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskOfT0CancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskOfT0CancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfContextTaskOfT0Context">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfContextTaskOfT0IDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAndCaptureAsyncFuncOfTaskOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfCancellationTokenTaskOfT0CancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfCancellationTokenTaskOfT0CancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfContextTaskOfT0Context">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfContextTaskOfT0IDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.ExecuteAsyncFuncOfTaskOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.PollyIAsyncPolicyTResultWithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy`1.Polly.IAsyncPolicy&lt;TResult&gt;.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.WithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.WrapAsyncIAsyncPolicy">
            <summary>Sets the Shim of AsyncPolicy`1.WrapAsync(IAsyncPolicy innerPolicy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.AllInstances.WrapAsyncIAsyncPolicyOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.WrapAsync(IAsyncPolicy`1&lt;!0&gt; innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ConstructorExceptionPredicatesResultPredicatesOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.AsyncPolicy`1(ExceptionPredicates exceptionPredicates, ResultPredicates`1&lt;!0&gt; resultPredicates)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ConstructorPolicyBuilderOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.AsyncPolicy`1(PolicyBuilder`1&lt;!0&gt; policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskOfT0CancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskOfT0CancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextTaskOfT0Context">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextTaskOfT0IDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfTaskOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfCancellationTokenTaskOfT0CancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfCancellationTokenTaskOfT0CancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfContextTaskOfT0Context">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfContextTaskOfT0IDictionaryOfStringObject">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.ExecuteAsyncFuncOfTaskOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.ExecuteAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.PollyIAsyncPolicyTResultWithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy`1.Polly.IAsyncPolicy&lt;TResult&gt;.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.WithPolicyKeyString">
            <summary>Sets the Shim of AsyncPolicy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.WrapAsyncIAsyncPolicy">
            <summary>Sets the Shim of AsyncPolicy`1.WrapAsync(IAsyncPolicy innerPolicy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncPolicy`1.WrapAsyncIAsyncPolicyOfT0">
            <summary>Sets the Shim of AsyncPolicy`1.WrapAsync(IAsyncPolicy`1&lt;!0&gt; innerPolicy)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncRetrySyntax">
            <summary>Shim type of Polly.AsyncRetrySyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetrySyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetrySyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetrySyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilder">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderActionOfExceptionInt32">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Action`2&lt;Exception,Int32&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderActionOfExceptionInt32Context">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Action`3&lt;Exception,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderFuncOfExceptionInt32ContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Func`4&lt;Exception,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderFuncOfExceptionInt32Task">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Func`3&lt;Exception,Int32,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderInt32">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Int32 retryCount)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderInt32ActionOfExceptionInt32">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Action`2&lt;Exception,Int32&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderInt32ActionOfExceptionInt32Context">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Action`3&lt;Exception,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderInt32FuncOfExceptionInt32ContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`4&lt;Exception,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryAsyncPolicyBuilderInt32FuncOfExceptionInt32Task">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Exception,Int32,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilder">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderActionOfException">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Action`1&lt;Exception&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderActionOfExceptionContext">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Action`2&lt;Exception,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderActionOfExceptionInt32">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Action`2&lt;Exception,Int32&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderActionOfExceptionInt32Context">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Action`3&lt;Exception,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderFuncOfExceptionContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Func`3&lt;Exception,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderFuncOfExceptionInt32ContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Func`4&lt;Exception,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderFuncOfExceptionInt32Task">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Func`3&lt;Exception,Int32,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.RetryForeverAsyncPolicyBuilderFuncOfExceptionTask">
            <summary>Sets the Shim of AsyncRetrySyntax.RetryForeverAsync(PolicyBuilder policyBuilder, Func`2&lt;Exception,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderIEnumerableOfTimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderIEnumerableOfTimeSpanActionOfExceptionTimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`2&lt;Exception,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderIEnumerableOfTimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderIEnumerableOfTimeSpanActionOfExceptionTimeSpanInt32Context">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderIEnumerableOfTimeSpanFuncOfExceptionTimeSpanContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Func`4&lt;Exception,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderIEnumerableOfTimeSpanFuncOfExceptionTimeSpanInt32ContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Func`5&lt;Exception,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderIEnumerableOfTimeSpanFuncOfExceptionTimeSpanTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Func`3&lt;Exception,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32ContextTimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32ContextTimeSpanActionOfExceptionTimeSpanInt32Context">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32ContextTimeSpanFuncOfExceptionTimeSpanContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`4&lt;Exception,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32ContextTimeSpanFuncOfExceptionTimeSpanInt32ContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;Exception,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32ExceptionContextTimeSpanFuncOfExceptionTimeSpanInt32ContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;Exception,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32TimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32TimeSpanActionOfExceptionTimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;Exception,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32TimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32TimeSpanActionOfExceptionTimeSpanInt32Context">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32TimeSpanFuncOfExceptionTimeSpanContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`4&lt;Exception,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32TimeSpanFuncOfExceptionTimeSpanInt32ContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`5&lt;Exception,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryAsyncPolicyBuilderInt32FuncOfInt32TimeSpanFuncOfExceptionTimeSpanTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryAsync(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`3&lt;Exception,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32ContextTimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32ContextTimeSpanActionOfExceptionInt32TimeSpanContext">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,Int32,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32ContextTimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32ContextTimeSpanFuncOfExceptionInt32TimeSpanContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;Exception,Int32,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32ContextTimeSpanFuncOfExceptionTimeSpanContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`4&lt;Exception,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32ExceptionContextTimeSpanFuncOfExceptionInt32TimeSpanContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;Exception,Int32,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32ExceptionContextTimeSpanFuncOfExceptionTimeSpanContextTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider, Func`4&lt;Exception,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32TimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32TimeSpanActionOfExceptionInt32TimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,Int32,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32TimeSpanActionOfExceptionTimeSpan">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;Exception,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32TimeSpanFuncOfExceptionInt32TimeSpanTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`4&lt;Exception,Int32,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetrySyntax.WaitAndRetryForeverAsyncPolicyBuilderFuncOfInt32TimeSpanFuncOfExceptionTimeSpanTask">
            <summary>Sets the Shim of AsyncRetrySyntax.WaitAndRetryForeverAsync(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`3&lt;Exception,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimAsyncRetryTResultSyntax">
            <summary>Shim type of Polly.AsyncRetryTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimAsyncRetryTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Int32&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0Int32ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},System.Int32,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0Int32Task``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},System.Int32,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0Int32ActionOfDelegateResultOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Action{Polly.DelegateResult{``0},System.Int32},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Int32&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0Int32ActionOfDelegateResultOfM0Int32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Action{Polly.DelegateResult{``0},System.Int32,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0Int32FuncOfDelegateResultOfM0Int32ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{Polly.DelegateResult{``0},System.Int32,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`4&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryAsyncOf1PolicyBuilderOfM0Int32FuncOfDelegateResultOfM0Int32Task``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{Polly.DelegateResult{``0},System.Int32,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0}},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`1&lt;DelegateResult`1&lt;!!0&gt;&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Int32&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;DelegateResult`1&lt;!!0&gt;,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0Int32ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},System.Int32,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0Int32Task``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},System.Int32,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.RetryForeverAsyncOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0Task``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.RetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;DelegateResult`1&lt;!!0&gt;,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0IEnumerableOfTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0IEnumerableOfTimeSpanActionOfDelegateResultOfM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0IEnumerableOfTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0IEnumerableOfTimeSpanActionOfDelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0IEnumerableOfTimeSpanFuncOfDelegateResultOfM0TimeSpanContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Func`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0IEnumerableOfTimeSpanFuncOfDelegateResultOfM0TimeSpanInt32ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Func`5&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0IEnumerableOfTimeSpanFuncOfDelegateResultOfM0TimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Func`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32ContextTimeSpanFuncOfDelegateResultOfM0TimeSpanContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32ContextTimeSpanFuncOfDelegateResultOfM0TimeSpanInt32ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32DelegateResultOfM0ContextTimeSpanFuncOfDelegateResultOfM0TimeSpanInt32ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanFuncOfDelegateResultOfM0TimeSpanContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanFuncOfDelegateResultOfM0TimeSpanInt32ContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`5&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryAsyncOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanFuncOfDelegateResultOfM0TimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0Int32TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.Int32,System.TimeSpan,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpanFuncOfDelegateResultOfM0Int32TimeSpanContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.Int32,System.TimeSpan,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpanFuncOfDelegateResultOfM0TimeSpanContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Func`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32DelegateResultOfM0ContextTimeSpanFuncOfDelegateResultOfM0Int32TimeSpanContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.Int32,System.TimeSpan,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider, Func`5&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32DelegateResultOfM0ContextTimeSpanFuncOfDelegateResultOfM0TimeSpanContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider, Func`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32TimeSpanActionOfDelegateResultOfM0Int32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.Int32,System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32TimeSpanFuncOfDelegateResultOfM0Int32TimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.Int32,System.TimeSpan,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`4&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimAsyncRetryTResultSyntax.WaitAndRetryForeverAsyncOf1PolicyBuilderOfM0FuncOfInt32TimeSpanFuncOfDelegateResultOfM0TimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},System.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Threading.Tasks.Task},Polly.Retry.AsyncRetryPolicy{``0}})">
            <summary>Sets the Shim of AsyncRetryTResultSyntax.WaitAndRetryForeverAsync(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Func`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Task&gt; onRetryAsync)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimCircuitBreakerSyntax">
            <summary>Shim type of Polly.CircuitBreakerSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerSyntax.CircuitBreakerPolicyBuilderInt32TimeSpan">
            <summary>Sets the Shim of CircuitBreakerSyntax.CircuitBreaker(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerSyntax.CircuitBreakerPolicyBuilderInt32TimeSpanActionOfExceptionCircuitStateTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of CircuitBreakerSyntax.CircuitBreaker(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4&lt;Exception,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerSyntax.CircuitBreakerPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanAction">
            <summary>Sets the Shim of CircuitBreakerSyntax.CircuitBreaker(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerSyntax.CircuitBreakerPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanActionAction">
            <summary>Sets the Shim of CircuitBreakerSyntax.CircuitBreaker(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;Exception,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerSyntax.CircuitBreakerPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContext">
            <summary>Sets the Shim of CircuitBreakerSyntax.CircuitBreaker(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerSyntax.CircuitBreakerPolicyBuilderInt32TimeSpanActionOfExceptionTimeSpanContextActionOfContextAction">
            <summary>Sets the Shim of CircuitBreakerSyntax.CircuitBreaker(PolicyBuilder policyBuilder, Int32 exceptionsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;Exception,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimCircuitBreakerTResultSyntax">
            <summary>Shim type of Polly.CircuitBreakerTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimCircuitBreakerTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.CircuitBreakerOf1PolicyBuilderOfM0Int32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of CircuitBreakerTResultSyntax.CircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.CircuitBreakerOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0CircuitStateTimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},Polly.CircuitBreaker.CircuitState,System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of CircuitBreakerTResultSyntax.CircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`4&lt;DelegateResult`1&lt;!!0&gt;,CircuitState,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.CircuitBreakerOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of CircuitBreakerTResultSyntax.CircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.CircuitBreakerOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanActionAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan},System.Action,System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of CircuitBreakerTResultSyntax.CircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onBreak, Action onReset, Action onHalfOpen)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.CircuitBreakerOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of CircuitBreakerTResultSyntax.CircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimCircuitBreakerTResultSyntax.CircuitBreakerOf1PolicyBuilderOfM0Int32TimeSpanActionOfDelegateResultOfM0TimeSpanContextActionOfContextAction``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.TimeSpan,System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,Polly.CircuitBreaker.CircuitBreakerPolicy{``0}})">
            <summary>Sets the Shim of CircuitBreakerTResultSyntax.CircuitBreaker(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onBreak, Action`1&lt;Context&gt; onReset, Action onHalfOpen)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimContext">
            <summary>Shim type of Polly.Context</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.#ctor(Polly.Context)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AddObjectObject">
            <summary>Sets the Shim of Context.Add(Object key, Object value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AddStringObject">
            <summary>Sets the Shim of Context.Add(String key, Object value)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimContext.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.AddObjectObject">
            <summary>Sets the Shim of Context.Add(Object key, Object value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.AddStringObject">
            <summary>Sets the Shim of Context.Add(String key, Object value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.Clear">
            <summary>Sets the Shim of Context.Clear()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ContainsKeyString">
            <summary>Sets the Shim of Context.ContainsKey(String key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ContainsObject">
            <summary>Sets the Shim of Context.Contains(Object key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.CopyToArrayInt32">
            <summary>Sets the Shim of Context.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.CorrelationIdGet">
            <summary>Sets the Shim of Context.get_CorrelationId()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.CountGet">
            <summary>Sets the Shim of Context.get_Count()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.GetEnumerator">
            <summary>Sets the Shim of Context.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.IsFixedSizeSystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_IsFixedSize()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.IsReadOnlySystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectget">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.get_IsReadOnly()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.IsReadOnlySystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_IsReadOnly()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.IsSynchronizedSystemCollectionsICollectionget">
            <summary>Sets the Shim of Context.System.Collections.ICollection.get_IsSynchronized()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ItemGetString">
            <summary>Sets the Shim of Context.get_Item(String key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ItemSetStringObject">
            <summary>Sets the Shim of Context.set_Item(String key, Object value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ItemSystemCollectionsIDictionarygetObject">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_Item(Object key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ItemSystemCollectionsIDictionarysetObjectObject">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.set_Item(Object key, Object value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.KeysGet">
            <summary>Sets the Shim of Context.get_Keys()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.KeysSystemCollectionsGenericIReadOnlyDictionarySystemStringSystemObjectget">
            <summary>Sets the Shim of Context.System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;.get_Keys()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.KeysSystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_Keys()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.OperationKeyGet">
            <summary>Sets the Shim of Context.get_OperationKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.PolicyKeyGet">
            <summary>Sets the Shim of Context.get_PolicyKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.PolicyKeySetString">
            <summary>Sets the Shim of Context.set_PolicyKey(String value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.PolicyWrapKeyGet">
            <summary>Sets the Shim of Context.get_PolicyWrapKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.PolicyWrapKeySetString">
            <summary>Sets the Shim of Context.set_PolicyWrapKey(String value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.RemoveObject">
            <summary>Sets the Shim of Context.Remove(Object key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.RemoveString">
            <summary>Sets the Shim of Context.Remove(String key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.SyncRootSystemCollectionsICollectionget">
            <summary>Sets the Shim of Context.System.Collections.ICollection.get_SyncRoot()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectAddKeyValuePairOfStringObject">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Add(KeyValuePair`2&lt;String,Object&gt; item)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectContainsKeyValuePairOfStringObject">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Contains(KeyValuePair`2&lt;String,Object&gt; item)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectCopyToKeyValuePairOfStringObjectArrayInt32">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.CopyTo(KeyValuePair`2&lt;String,Object&gt;[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectRemoveKeyValuePairOfStringObject">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Remove(KeyValuePair`2&lt;String,Object&gt; item)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.SystemCollectionsIDictionaryGetEnumerator">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the Shim of Context.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.TryGetValueStringObjectOut">
            <summary>Sets the Shim of Context.TryGetValue(String key, Object&amp; value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ValuesGet">
            <summary>Sets the Shim of Context.get_Values()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ValuesSystemCollectionsGenericIReadOnlyDictionarySystemStringSystemObjectget">
            <summary>Sets the Shim of Context.System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;.get_Values()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.ValuesSystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_Values()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.AllInstances.WrappedDictionaryGet">
            <summary>Sets the Shim of Context.get_WrappedDictionary()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.IDictionary)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimContext.Bind(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.Clear">
            <summary>Sets the Shim of Context.Clear()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.Constructor">
            <summary>Sets the Shim of Context.Context()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ConstructorIDictionaryOfStringObject">
            <summary>Sets the Shim of Context.Context(IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ConstructorString">
            <summary>Sets the Shim of Context.Context(String operationKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ConstructorStringIDictionaryOfStringObject">
            <summary>Sets the Shim of Context.Context(String operationKey, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ContainsKeyString">
            <summary>Sets the Shim of Context.ContainsKey(String key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ContainsObject">
            <summary>Sets the Shim of Context.Contains(Object key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.CopyToArrayInt32">
            <summary>Sets the Shim of Context.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.CorrelationIdGet">
            <summary>Sets the Shim of Context.get_CorrelationId()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.CountGet">
            <summary>Sets the Shim of Context.get_Count()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.GetEnumerator">
            <summary>Sets the Shim of Context.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.IsFixedSizeSystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_IsFixedSize()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.IsReadOnlySystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectget">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.get_IsReadOnly()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.IsReadOnlySystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_IsReadOnly()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.IsSynchronizedSystemCollectionsICollectionget">
            <summary>Sets the Shim of Context.System.Collections.ICollection.get_IsSynchronized()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ItemGetString">
            <summary>Sets the Shim of Context.get_Item(String key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ItemSetStringObject">
            <summary>Sets the Shim of Context.set_Item(String key, Object value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ItemSystemCollectionsIDictionarygetObject">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_Item(Object key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ItemSystemCollectionsIDictionarysetObjectObject">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.set_Item(Object key, Object value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.KeysGet">
            <summary>Sets the Shim of Context.get_Keys()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.KeysSystemCollectionsGenericIReadOnlyDictionarySystemStringSystemObjectget">
            <summary>Sets the Shim of Context.System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;.get_Keys()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.KeysSystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_Keys()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.None">
            <summary>Sets the Shim of Context.None()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.OperationKeyGet">
            <summary>Sets the Shim of Context.get_OperationKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.PolicyKeyGet">
            <summary>Sets the Shim of Context.get_PolicyKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.PolicyKeySetString">
            <summary>Sets the Shim of Context.set_PolicyKey(String value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.PolicyWrapKeyGet">
            <summary>Sets the Shim of Context.get_PolicyWrapKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.PolicyWrapKeySetString">
            <summary>Sets the Shim of Context.set_PolicyWrapKey(String value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.RemoveObject">
            <summary>Sets the Shim of Context.Remove(Object key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.RemoveString">
            <summary>Sets the Shim of Context.Remove(String key)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.SyncRootSystemCollectionsICollectionget">
            <summary>Sets the Shim of Context.System.Collections.ICollection.get_SyncRoot()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectAddKeyValuePairOfStringObject">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Add(KeyValuePair`2&lt;String,Object&gt; item)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectContainsKeyValuePairOfStringObject">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Contains(KeyValuePair`2&lt;String,Object&gt; item)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectCopyToKeyValuePairOfStringObjectArrayInt32">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.CopyTo(KeyValuePair`2&lt;String,Object&gt;[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringSystemObjectRemoveKeyValuePairOfStringObject">
            <summary>Sets the Shim of Context.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Remove(KeyValuePair`2&lt;String,Object&gt; item)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.SystemCollectionsIDictionaryGetEnumerator">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the Shim of Context.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.TryGetValueStringObjectOut">
            <summary>Sets the Shim of Context.TryGetValue(String key, Object&amp; value)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ValuesGet">
            <summary>Sets the Shim of Context.get_Values()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ValuesSystemCollectionsGenericIReadOnlyDictionarySystemStringSystemObjectget">
            <summary>Sets the Shim of Context.System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;.get_Values()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.ValuesSystemCollectionsIDictionaryget">
            <summary>Sets the Shim of Context.System.Collections.IDictionary.get_Values()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimContext.WrappedDictionaryGet">
            <summary>Sets the Shim of Context.get_WrappedDictionary()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimDelegateResult`1">
            <summary>Shim type of Polly.DelegateResult`1</summary>
        </member>
        <member name="M:Polly.Fakes.ShimDelegateResult`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimDelegateResult`1.#ctor(Polly.DelegateResult{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimDelegateResult`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimDelegateResult`1.AllInstances.ExceptionGet">
            <summary>Sets the Shim of DelegateResult`1.get_Exception()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimDelegateResult`1.AllInstances.ResultGet">
            <summary>Sets the Shim of DelegateResult`1.get_Result()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimDelegateResult`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimDelegateResult`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimDelegateResult`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimDelegateResult`1.ConstructorException">
            <summary>Sets the Shim of DelegateResult`1.DelegateResult`1(Exception exception)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimDelegateResult`1.ConstructorT0">
            <summary>Sets the Shim of DelegateResult`1.DelegateResult`1(!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimDelegateResult`1.ExceptionGet">
            <summary>Sets the Shim of DelegateResult`1.get_Exception()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimDelegateResult`1.ResultGet">
            <summary>Sets the Shim of DelegateResult`1.get_Result()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimExceptionPredicates">
            <summary>Shim type of Polly.ExceptionPredicates</summary>
        </member>
        <member name="M:Polly.Fakes.ShimExceptionPredicates.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimExceptionPredicates.#ctor(Polly.ExceptionPredicates)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Polly.Fakes.ShimExceptionPredicates.AddExceptionPredicate">
            <summary>Sets the Shim of ExceptionPredicates.Add(ExceptionPredicate predicate)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimExceptionPredicates.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimExceptionPredicates.AllInstances.AddExceptionPredicate">
            <summary>Sets the Shim of ExceptionPredicates.Add(ExceptionPredicate predicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimExceptionPredicates.AllInstances.FirstMatchOrDefaultException">
            <summary>Sets the Shim of ExceptionPredicates.FirstMatchOrDefault(Exception ex)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimExceptionPredicates.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimExceptionPredicates.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimExceptionPredicates.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimExceptionPredicates.Constructor">
            <summary>Sets the Shim of ExceptionPredicates.ExceptionPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimExceptionPredicates.FirstMatchOrDefaultException">
            <summary>Sets the Shim of ExceptionPredicates.FirstMatchOrDefault(Exception ex)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimExceptionPredicates.StaticConstructor">
            <summary>Sets the Shim of ExceptionPredicates.ExceptionPredicates()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimFallbackSyntax">
            <summary>Shim type of Polly.FallbackSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.FallbackPolicyBuilderAction">
            <summary>Sets the Shim of FallbackSyntax.Fallback(PolicyBuilder policyBuilder, Action fallbackAction)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.FallbackPolicyBuilderActionActionOfException">
            <summary>Sets the Shim of FallbackSyntax.Fallback(PolicyBuilder policyBuilder, Action fallbackAction, Action`1&lt;Exception&gt; onFallback)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.FallbackPolicyBuilderActionOfCancellationToken">
            <summary>Sets the Shim of FallbackSyntax.Fallback(PolicyBuilder policyBuilder, Action`1&lt;CancellationToken&gt; fallbackAction)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.FallbackPolicyBuilderActionOfCancellationTokenActionOfException">
            <summary>Sets the Shim of FallbackSyntax.Fallback(PolicyBuilder policyBuilder, Action`1&lt;CancellationToken&gt; fallbackAction, Action`1&lt;Exception&gt; onFallback)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.FallbackPolicyBuilderActionOfContextActionOfExceptionContext">
            <summary>Sets the Shim of FallbackSyntax.Fallback(PolicyBuilder policyBuilder, Action`1&lt;Context&gt; fallbackAction, Action`2&lt;Exception,Context&gt; onFallback)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.FallbackPolicyBuilderActionOfContextCancellationTokenActionOfExceptionContext">
            <summary>Sets the Shim of FallbackSyntax.Fallback(PolicyBuilder policyBuilder, Action`2&lt;Context,CancellationToken&gt; fallbackAction, Action`2&lt;Exception,Context&gt; onFallback)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackSyntax.FallbackPolicyBuilderActionOfExceptionContextCancellationTokenActionOfExceptionContext">
            <summary>Sets the Shim of FallbackSyntax.Fallback(PolicyBuilder policyBuilder, Action`3&lt;Exception,Context,CancellationToken&gt; fallbackAction, Action`2&lt;Exception,Context&gt; onFallback)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimFallbackTResultSyntax">
            <summary>Shim type of Polly.FallbackTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimFallbackTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0FuncOfCancellationTokenM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Threading.CancellationToken,``0},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;CancellationToken,!!0&gt; fallbackAction)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0FuncOfCancellationTokenM0ActionOfDelegateResultOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Threading.CancellationToken,``0},System.Action{Polly.DelegateResult{``0}},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;CancellationToken,!!0&gt; fallbackAction, Action`1&lt;DelegateResult`1&lt;!!0&gt;&gt; onFallback)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0FuncOfContextCancellationTokenM0ActionOfDelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Action{Polly.DelegateResult{``0},Polly.Context},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Context,CancellationToken,!!0&gt; fallbackAction, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Context&gt; onFallback)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0FuncOfContextM0ActionOfDelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.Context,``0},System.Action{Polly.DelegateResult{``0},Polly.Context},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Context,!!0&gt; fallbackAction, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Context&gt; onFallback)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0FuncOfDelegateResultOfM0ContextCancellationTokenM0ActionOfDelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{Polly.DelegateResult{``0},Polly.Context,System.Threading.CancellationToken,``0},System.Action{Polly.DelegateResult{``0},Polly.Context},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;DelegateResult`1&lt;!!0&gt;,Context,CancellationToken,!!0&gt; fallbackAction, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Context&gt; onFallback)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{``0},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`1&lt;!!0&gt; fallbackAction)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0FuncOfM0ActionOfDelegateResultOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{``0},System.Action{Polly.DelegateResult{``0}},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`1&lt;!!0&gt; fallbackAction, Action`1&lt;DelegateResult`1&lt;!!0&gt;&gt; onFallback)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},``0,Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, !!0 fallbackValue)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0M0ActionOfDelegateResultOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},``0,System.Action{Polly.DelegateResult{``0}},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, !!0 fallbackValue, Action`1&lt;DelegateResult`1&lt;!!0&gt;&gt; onFallback)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimFallbackTResultSyntax.FallbackOf1PolicyBuilderOfM0M0ActionOfDelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},``0,System.Action{Polly.DelegateResult{``0},Polly.Context},Polly.Fallback.FallbackPolicy{``0}})">
            <summary>Sets the Shim of FallbackTResultSyntax.Fallback(PolicyBuilder`1&lt;!!0&gt; policyBuilder, !!0 fallbackValue, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Context&gt; onFallback)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimIAsyncPolicyExtensions">
            <summary>Shim type of Polly.IAsyncPolicyExtensions</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyExtensions.AsAsyncPolicyOf1IAsyncPolicy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.IAsyncPolicy,Polly.IAsyncPolicy{``0}})">
            <summary>Sets the Shim of IAsyncPolicyExtensions.AsAsyncPolicy(IAsyncPolicy policy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimIAsyncPolicyExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions">
            <summary>Shim type of Polly.IAsyncPolicyPolicyWrapExtensions</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.WrapAsyncIAsyncPolicyIAsyncPolicy">
            <summary>Sets the Shim of IAsyncPolicyPolicyWrapExtensions.WrapAsync(IAsyncPolicy outerPolicy, IAsyncPolicy innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.WrapAsyncOf1IAsyncPolicyIAsyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.IAsyncPolicy,Polly.IAsyncPolicy{``0},Polly.Wrap.AsyncPolicyWrap{``0}})">
            <summary>Sets the Shim of IAsyncPolicyPolicyWrapExtensions.WrapAsync(IAsyncPolicy outerPolicy, IAsyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.WrapAsyncOf1IAsyncPolicyOfM0IAsyncPolicy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.IAsyncPolicy{``0},Polly.IAsyncPolicy,Polly.Wrap.AsyncPolicyWrap{``0}})">
            <summary>Sets the Shim of IAsyncPolicyPolicyWrapExtensions.WrapAsync(IAsyncPolicy`1&lt;!!0&gt; outerPolicy, IAsyncPolicy innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimIAsyncPolicyPolicyWrapExtensions.WrapAsyncOf1IAsyncPolicyOfM0IAsyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.IAsyncPolicy{``0},Polly.IAsyncPolicy{``0},Polly.Wrap.AsyncPolicyWrap{``0}})">
            <summary>Sets the Shim of IAsyncPolicyPolicyWrapExtensions.WrapAsync(IAsyncPolicy`1&lt;!!0&gt; outerPolicy, IAsyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimISyncPolicyExtensions">
            <summary>Shim type of Polly.ISyncPolicyExtensions</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyExtensions.AsPolicyOf1ISyncPolicy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ISyncPolicy,Polly.ISyncPolicy{``0}})">
            <summary>Sets the Shim of ISyncPolicyExtensions.AsPolicy(ISyncPolicy policy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimISyncPolicyExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions">
            <summary>Shim type of Polly.ISyncPolicyPolicyWrapExtensions</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.WrapISyncPolicyISyncPolicy">
            <summary>Sets the Shim of ISyncPolicyPolicyWrapExtensions.Wrap(ISyncPolicy outerPolicy, ISyncPolicy innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.WrapOf1ISyncPolicyISyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ISyncPolicy,Polly.ISyncPolicy{``0},Polly.Wrap.PolicyWrap{``0}})">
            <summary>Sets the Shim of ISyncPolicyPolicyWrapExtensions.Wrap(ISyncPolicy outerPolicy, ISyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.WrapOf1ISyncPolicyOfM0ISyncPolicy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ISyncPolicy{``0},Polly.ISyncPolicy,Polly.Wrap.PolicyWrap{``0}})">
            <summary>Sets the Shim of ISyncPolicyPolicyWrapExtensions.Wrap(ISyncPolicy`1&lt;!!0&gt; outerPolicy, ISyncPolicy innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimISyncPolicyPolicyWrapExtensions.WrapOf1ISyncPolicyOfM0ISyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ISyncPolicy{``0},Polly.ISyncPolicy{``0},Polly.Wrap.PolicyWrap{``0}})">
            <summary>Sets the Shim of ISyncPolicyPolicyWrapExtensions.Wrap(ISyncPolicy`1&lt;!!0&gt; outerPolicy, ISyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicy">
            <summary>Shim type of Polly.Policy</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.#ctor(Polly.Policy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAction">
            <summary>Sets the Shim of Policy.Execute(Action action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteActionOfCancellationTokenCancellationToken">
            <summary>Sets the Shim of Policy.Execute(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of Policy.Execute(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteActionOfContextCancellationTokenIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy.Execute(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteActionOfContextContext">
            <summary>Sets the Shim of Policy.Execute(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteActionOfContextIDictionaryOfStringObject">
            <summary>Sets the Shim of Policy.Execute(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureAction">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureActionOfCancellationTokenCancellationToken">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureActionOfContextCancellationTokenIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureActionOfContextContext">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureActionOfContextIDictionaryOfStringObject">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureOf1FuncOfCancellationTokenM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureOf1FuncOfContextCancellationTokenM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureOf1FuncOfContextM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,``0},Polly.Context,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureOf1FuncOfContextM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object},Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteAndCaptureOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{``0},Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteOf1FuncOfCancellationTokenM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteOf1FuncOfContextCancellationTokenM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteOf1FuncOfContextM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,``0},Polly.Context,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteOf1FuncOfContextM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object},``0})">
            <summary>Sets the Shim of Policy.Execute(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.ExecuteOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,System.Func{``0},``0})">
            <summary>Sets the Shim of Policy.Execute(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of Policy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.PollyISyncPolicyWithPolicyKeyString">
            <summary>Sets the Shim of Policy.Polly.ISyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.WithPolicyKeyString">
            <summary>Sets the Shim of Policy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.AllInstances.WrapISyncPolicy">
            <summary>Sets the Shim of Policy.Wrap(ISyncPolicy innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.AllInstances.WrapOf1ISyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Policy,Polly.ISyncPolicy{``0},Polly.Wrap.PolicyWrap{``0}})">
            <summary>Sets the Shim of Policy.Wrap(ISyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadAsyncInt32">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadAsyncInt32FuncOfContextTask">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization, Func`2&lt;Context,Task&gt; onBulkheadRejectedAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadAsyncInt32Int32">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization, Int32 maxQueuingActions)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadAsyncInt32Int32FuncOfContextTask">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization, Int32 maxQueuingActions, Func`2&lt;Context,Task&gt; onBulkheadRejectedAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadAsyncOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Bulkhead.AsyncBulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadAsyncOf1Int32FuncOfContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Func{Polly.Context,System.Threading.Tasks.Task},Polly.Bulkhead.AsyncBulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization, Func`2&lt;Context,Task&gt; onBulkheadRejectedAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadAsyncOf1Int32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Int32,Polly.Bulkhead.AsyncBulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization, Int32 maxQueuingActions)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadAsyncOf1Int32Int32FuncOfContextTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Int32,System.Func{Polly.Context,System.Threading.Tasks.Task},Polly.Bulkhead.AsyncBulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.BulkheadAsync(Int32 maxParallelization, Int32 maxQueuingActions, Func`2&lt;Context,Task&gt; onBulkheadRejectedAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadInt32">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadInt32ActionOfContext">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization, Action`1&lt;Context&gt; onBulkheadRejected)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadInt32Int32">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization, Int32 maxQueuingActions)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.BulkheadInt32Int32ActionOfContext">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization, Int32 maxQueuingActions, Action`1&lt;Context&gt; onBulkheadRejected)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Bulkhead.BulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadOf1Int32ActionOfContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Action{Polly.Context},Polly.Bulkhead.BulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization, Action`1&lt;Context&gt; onBulkheadRejected)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadOf1Int32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Int32,Polly.Bulkhead.BulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization, Int32 maxQueuingActions)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.BulkheadOf1Int32Int32ActionOfContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Int32,System.Action{Polly.Context},Polly.Bulkhead.BulkheadPolicy{``0}})">
            <summary>Sets the Shim of Policy.Bulkhead(Int32 maxParallelization, Int32 maxQueuingActions, Action`1&lt;Context&gt; onBulkheadRejected)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderITtlStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderITtlStrategyActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderTimeSpanActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderTimeSpanActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheAsyncIAsyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringException">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderITtlStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderITtlStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyOfM0ActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyOfM0ActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyOfM0FuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyOfM0FuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyOfM0ICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0ITtlStrategyOfM0ICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0TimeSpanActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},System.TimeSpan,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0TimeSpanActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},System.TimeSpan,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0TimeSpanFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0TimeSpanFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0TimeSpanICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderOfM0TimeSpanICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider{``0},System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderTimeSpanActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,System.TimeSpan,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderTimeSpanActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,System.TimeSpan,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheAsyncOf1IAsyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.IAsyncCacheProvider,System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.AsyncCachePolicy{``0}})">
            <summary>Sets the Shim of Policy.CacheAsync(IAsyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderITtlStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderITtlStrategyActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderTimeSpanActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderTimeSpanActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.CacheISyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringException">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderITtlStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderITtlStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderITtlStrategyFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderITtlStrategyICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyOfM0ActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyOfM0ActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyOfM0FuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyOfM0FuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyOfM0ICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0ITtlStrategyOfM0ICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},Polly.Caching.ITtlStrategy{``0},Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, ITtlStrategy`1&lt;!!0&gt; ttlStrategy, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0TimeSpanActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},System.TimeSpan,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0TimeSpanActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},System.TimeSpan,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0TimeSpanFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0TimeSpanFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0TimeSpanICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderOfM0TimeSpanICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider{``0},System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider`1&lt;!!0&gt; cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderTimeSpanActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,System.TimeSpan,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderTimeSpanActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,System.TimeSpan,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderTimeSpanFuncOfContextStringActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,System.TimeSpan,System.Func{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, Func`2&lt;Context,String&gt; cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringActionOfContextStringActionOfContextStringActionOfContextStringExceptionActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String},System.Action{Polly.Context,System.String,System.Exception},System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`2&lt;Context,String&gt; onCacheGet, Action`2&lt;Context,String&gt; onCacheMiss, Action`2&lt;Context,String&gt; onCachePut, Action`3&lt;Context,String,Exception&gt; onCacheGetError, Action`3&lt;Context,String,Exception&gt; onCachePutError)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.CacheOf1ISyncCacheProviderTimeSpanICacheKeyStrategyActionOfContextStringException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Caching.ISyncCacheProvider,System.TimeSpan,Polly.Caching.ICacheKeyStrategy,System.Action{Polly.Context,System.String,System.Exception},Polly.Caching.CachePolicy{``0}})">
            <summary>Sets the Shim of Policy.Cache(ISyncCacheProvider cacheProvider, TimeSpan ttl, ICacheKeyStrategy cacheKeyStrategy, Action`3&lt;Context,String,Exception&gt; onCacheError)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ConstructorExceptionPredicates">
            <summary>Sets the Shim of Policy.Policy(ExceptionPredicates exceptionPredicates)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ConstructorPolicyBuilder">
            <summary>Sets the Shim of Policy.Policy(PolicyBuilder policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteAction">
            <summary>Sets the Shim of Policy.Execute(Action action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteActionOfCancellationTokenCancellationToken">
            <summary>Sets the Shim of Policy.Execute(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of Policy.Execute(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteActionOfContextCancellationTokenIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy.Execute(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteActionOfContextContext">
            <summary>Sets the Shim of Policy.Execute(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteActionOfContextIDictionaryOfStringObject">
            <summary>Sets the Shim of Policy.Execute(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteAndCaptureAction">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteAndCaptureActionOfCancellationTokenCancellationToken">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteAndCaptureActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteAndCaptureActionOfContextCancellationTokenIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteAndCaptureActionOfContextContext">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ExecuteAndCaptureActionOfContextIDictionaryOfStringObject">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteAndCaptureOf1FuncOfCancellationTokenM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteAndCaptureOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteAndCaptureOf1FuncOfContextCancellationTokenM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteAndCaptureOf1FuncOfContextM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},Polly.Context,Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteAndCaptureOf1FuncOfContextM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object},Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteAndCaptureOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},Polly.PolicyResult{``0}})">
            <summary>Sets the Shim of Policy.ExecuteAndCapture(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteOf1FuncOfCancellationTokenM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteOf1FuncOfContextCancellationTokenM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteOf1FuncOfContextM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},Polly.Context,``0})">
            <summary>Sets the Shim of Policy.Execute(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteOf1FuncOfContextM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object},``0})">
            <summary>Sets the Shim of Policy.Execute(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.ExecuteOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0})">
            <summary>Sets the Shim of Policy.Execute(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.HandleInnerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder})">
            <summary>Sets the Shim of Policy.HandleInner()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.HandleInnerOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder})">
            <summary>Sets the Shim of Policy.HandleInner(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.HandleOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder})">
            <summary>Sets the Shim of Policy.Handle()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.HandleOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder})">
            <summary>Sets the Shim of Policy.Handle(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.HandleResultOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder{``0}})">
            <summary>Sets the Shim of Policy.HandleResult(Func`2&lt;!!0,Boolean&gt; resultPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.HandleResultOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Polly.PolicyBuilder{``0}})">
            <summary>Sets the Shim of Policy.HandleResult(!!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of Policy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.NoOp">
            <summary>Sets the Shim of Policy.NoOp()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.NoOpAsync">
            <summary>Sets the Shim of Policy.NoOpAsync()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.NoOpAsyncOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.NoOp.AsyncNoOpPolicy{``0}})">
            <summary>Sets the Shim of Policy.NoOpAsync()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.NoOpOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.NoOp.NoOpPolicy{``0}})">
            <summary>Sets the Shim of Policy.NoOp()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.PollyISyncPolicyWithPolicyKeyString">
            <summary>Sets the Shim of Policy.Polly.ISyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.RateLimitAsyncInt32TimeSpan">
            <summary>Sets the Shim of Policy.RateLimitAsync(Int32 numberOfExecutions, TimeSpan perTimeSpan)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.RateLimitAsyncInt32TimeSpanInt32">
            <summary>Sets the Shim of Policy.RateLimitAsync(Int32 numberOfExecutions, TimeSpan perTimeSpan, Int32 maxBurst)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitAsyncOf1Int32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,Polly.RateLimit.AsyncRateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimitAsync(Int32 numberOfExecutions, TimeSpan perTimeSpan)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitAsyncOf1Int32TimeSpanFuncOfTimeSpanContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,System.Func{System.TimeSpan,Polly.Context,``0},Polly.RateLimit.AsyncRateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimitAsync(Int32 numberOfExecutions, TimeSpan perTimeSpan, Func`3&lt;TimeSpan,Context,!!0&gt; retryAfterFactory)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitAsyncOf1Int32TimeSpanInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,System.Int32,Polly.RateLimit.AsyncRateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimitAsync(Int32 numberOfExecutions, TimeSpan perTimeSpan, Int32 maxBurst)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitAsyncOf1Int32TimeSpanInt32FuncOfTimeSpanContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,System.Int32,System.Func{System.TimeSpan,Polly.Context,``0},Polly.RateLimit.AsyncRateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimitAsync(Int32 numberOfExecutions, TimeSpan perTimeSpan, Int32 maxBurst, Func`3&lt;TimeSpan,Context,!!0&gt; retryAfterFactory)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.RateLimitInt32TimeSpan">
            <summary>Sets the Shim of Policy.RateLimit(Int32 numberOfExecutions, TimeSpan perTimeSpan)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.RateLimitInt32TimeSpanInt32">
            <summary>Sets the Shim of Policy.RateLimit(Int32 numberOfExecutions, TimeSpan perTimeSpan, Int32 maxBurst)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitOf1Int32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,Polly.RateLimit.RateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimit(Int32 numberOfExecutions, TimeSpan perTimeSpan)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitOf1Int32TimeSpanFuncOfTimeSpanContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,System.Func{System.TimeSpan,Polly.Context,``0},Polly.RateLimit.RateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimit(Int32 numberOfExecutions, TimeSpan perTimeSpan, Func`3&lt;TimeSpan,Context,!!0&gt; retryAfterFactory)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitOf1Int32TimeSpanInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,System.Int32,Polly.RateLimit.RateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimit(Int32 numberOfExecutions, TimeSpan perTimeSpan, Int32 maxBurst)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.RateLimitOf1Int32TimeSpanInt32FuncOfTimeSpanContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.TimeSpan,System.Int32,System.Func{System.TimeSpan,Polly.Context,``0},Polly.RateLimit.RateLimitPolicy{``0}})">
            <summary>Sets the Shim of Policy.RateLimit(Int32 numberOfExecutions, TimeSpan perTimeSpan, Int32 maxBurst, Func`3&lt;TimeSpan,Context,!!0&gt; retryAfterFactory)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfContextTimeSpan">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfContextTimeSpanFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfContextTimeSpanFuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfContextTimeSpanTimeoutStrategy">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfContextTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfContextTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfTimeSpan">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfTimeSpanFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfTimeSpanFuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfTimeSpanTimeoutStrategy">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncFuncOfTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncInt32">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncInt32FuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncInt32FuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncInt32TimeoutStrategy">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncInt32TimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncInt32TimeoutStrategyFuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfContextTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfContextTimeSpanFuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfContextTimeSpanFuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfContextTimeSpanTimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.TimeoutStrategy,Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfContextTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfContextTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfTimeSpanFuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfTimeSpanFuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfTimeSpanTimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.TimeoutStrategy,Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1FuncOfTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1Int32FuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1Int32FuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1Int32TimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.TimeoutStrategy,Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1Int32TimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1Int32TimeoutStrategyFuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(Int32 seconds, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1TimeSpanFuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1TimeSpanFuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1TimeSpanTimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.TimeoutStrategy,Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1TimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutAsyncOf1TimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.TimeoutStrategy,System.Func{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Threading.Tasks.Task},Polly.Timeout.AsyncTimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncTimeSpan">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncTimeSpanFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncTimeSpanFuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncTimeSpanTimeoutStrategy">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutAsyncTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskTask">
            <summary>Sets the Shim of Policy.TimeoutAsync(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Func`4&lt;Context,TimeSpan,Task,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfContextTimeSpan">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfContextTimeSpanActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfContextTimeSpanActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfContextTimeSpanTimeoutStrategy">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfContextTimeSpanTimeoutStrategyActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfContextTimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfTimeSpan">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfTimeSpanActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfTimeSpanActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfTimeSpanTimeoutStrategy">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfTimeSpanTimeoutStrategyActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutFuncOfTimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutInt32">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutInt32ActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutInt32ActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutInt32TimeoutStrategy">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutInt32TimeoutStrategyActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutInt32TimeoutStrategyActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfContextTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfContextTimeSpanActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfContextTimeSpanActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfContextTimeSpanTimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.TimeoutStrategy,Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfContextTimeSpanTimeoutStrategyActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfContextTimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfTimeSpanActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfTimeSpanActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfTimeSpanTimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.TimeoutStrategy,Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfTimeSpanTimeoutStrategyActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1FuncOfTimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.TimeSpan},Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Func`1&lt;TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1Int32ActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1Int32ActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1Int32TimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.TimeoutStrategy,Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1Int32TimeoutStrategyActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1Int32TimeoutStrategyActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(Int32 seconds, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1TimeSpanActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1TimeSpanActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1TimeSpanTimeoutStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.TimeoutStrategy,Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1TimeSpanTimeoutStrategyActionOfContextTimeSpanTask``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.TimeoutOf1TimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.TimeSpan,Polly.Timeout.TimeoutStrategy,System.Action{Polly.Context,System.TimeSpan,System.Threading.Tasks.Task,System.Exception},Polly.Timeout.TimeoutPolicy{``0}})">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutTimeSpan">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutTimeSpanActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutTimeSpanActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutTimeSpanTimeoutStrategy">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutTimeSpanTimeoutStrategyActionOfContextTimeSpanTask">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`3&lt;Context,TimeSpan,Task&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.TimeoutTimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of Policy.Timeout(TimeSpan timeout, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.WithPolicyKeyString">
            <summary>Sets the Shim of Policy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.WrapAsyncIAsyncPolicyArray">
            <summary>Sets the Shim of Policy.WrapAsync(IAsyncPolicy[] policies)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.WrapAsyncOf1IAsyncPolicyOfM0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.IAsyncPolicy{``0}[],Polly.Wrap.AsyncPolicyWrap{``0}})">
            <summary>Sets the Shim of Policy.WrapAsync(IAsyncPolicy`1&lt;!!0&gt;[] policies)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.WrapISyncPolicy">
            <summary>Sets the Shim of Policy.Wrap(ISyncPolicy innerPolicy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy.WrapISyncPolicyArray">
            <summary>Sets the Shim of Policy.Wrap(ISyncPolicy[] policies)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.WrapOf1ISyncPolicyOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ISyncPolicy{``0},Polly.Wrap.PolicyWrap{``0}})">
            <summary>Sets the Shim of Policy.Wrap(ISyncPolicy`1&lt;!!0&gt; innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy.WrapOf1ISyncPolicyOfM0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ISyncPolicy{``0}[],Polly.Wrap.PolicyWrap{``0}})">
            <summary>Sets the Shim of Policy.Wrap(ISyncPolicy`1&lt;!!0&gt;[] policies)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicy`1">
            <summary>Shim type of Polly.Policy`1</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.#ctor(Polly.Policy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteAndCaptureFuncOfCancellationTokenT0CancellationToken">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteAndCaptureFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteAndCaptureFuncOfContextCancellationTokenT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteAndCaptureFuncOfContextT0Context">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteAndCaptureFuncOfContextT0IDictionaryOfStringObject">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteAndCaptureFuncOfT0">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteFuncOfCancellationTokenT0CancellationToken">
            <summary>Sets the Shim of Policy`1.Execute(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of Policy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteFuncOfContextCancellationTokenT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteFuncOfContextT0Context">
            <summary>Sets the Shim of Policy`1.Execute(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteFuncOfContextT0IDictionaryOfStringObject">
            <summary>Sets the Shim of Policy`1.Execute(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.ExecuteFuncOfT0">
            <summary>Sets the Shim of Policy`1.Execute(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.PollyISyncPolicyTResultWithPolicyKeyString">
            <summary>Sets the Shim of Policy`1.Polly.ISyncPolicy&lt;TResult&gt;.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.WithPolicyKeyString">
            <summary>Sets the Shim of Policy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.WrapISyncPolicy">
            <summary>Sets the Shim of Policy`1.Wrap(ISyncPolicy innerPolicy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.AllInstances.WrapISyncPolicyOfT0">
            <summary>Sets the Shim of Policy`1.Wrap(ISyncPolicy`1&lt;!0&gt; innerPolicy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ConstructorExceptionPredicatesResultPredicatesOfT0">
            <summary>Sets the Shim of Policy`1.Policy`1(ExceptionPredicates exceptionPredicates, ResultPredicates`1&lt;!0&gt; resultPredicates)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ConstructorPolicyBuilderOfT0">
            <summary>Sets the Shim of Policy`1.Policy`1(PolicyBuilder`1&lt;!0&gt; policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteAndCaptureFuncOfCancellationTokenT0CancellationToken">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteAndCaptureFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteAndCaptureFuncOfContextCancellationTokenT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteAndCaptureFuncOfContextT0Context">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteAndCaptureFuncOfContextT0IDictionaryOfStringObject">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteAndCaptureFuncOfT0">
            <summary>Sets the Shim of Policy`1.ExecuteAndCapture(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteFuncOfCancellationTokenT0CancellationToken">
            <summary>Sets the Shim of Policy`1.Execute(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of Policy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteFuncOfContextCancellationTokenT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the Shim of Policy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteFuncOfContextT0Context">
            <summary>Sets the Shim of Policy`1.Execute(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteFuncOfContextT0IDictionaryOfStringObject">
            <summary>Sets the Shim of Policy`1.Execute(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.ExecuteFuncOfT0">
            <summary>Sets the Shim of Policy`1.Execute(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.HandleInnerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of Policy`1.HandleInner()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.HandleInnerOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of Policy`1.HandleInner(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.HandleOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of Policy`1.Handle()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicy`1.HandleOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of Policy`1.Handle(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.HandleResultFuncOfT0Boolean">
            <summary>Sets the Shim of Policy`1.HandleResult(Func`2&lt;!0,Boolean&gt; resultPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.HandleResultT0">
            <summary>Sets the Shim of Policy`1.HandleResult(!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.PollyISyncPolicyTResultWithPolicyKeyString">
            <summary>Sets the Shim of Policy`1.Polly.ISyncPolicy&lt;TResult&gt;.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.WithPolicyKeyString">
            <summary>Sets the Shim of Policy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.WrapISyncPolicy">
            <summary>Sets the Shim of Policy`1.Wrap(ISyncPolicy innerPolicy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicy`1.WrapISyncPolicyOfT0">
            <summary>Sets the Shim of Policy`1.Wrap(ISyncPolicy`1&lt;!0&gt; innerPolicy)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBase">
            <summary>Shim type of Polly.PolicyBase</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBase.#ctor(Polly.PolicyBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.AllInstances.ExceptionPredicatesGet">
            <summary>Sets the Shim of PolicyBase.get_ExceptionPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.AllInstances.PolicyKeyGet">
            <summary>Sets the Shim of PolicyBase.get_PolicyKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.AllInstances.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of PolicyBase.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.ConstructorExceptionPredicates">
            <summary>Sets the Shim of PolicyBase.PolicyBase(ExceptionPredicates exceptionPredicates)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.ConstructorPolicyBuilder">
            <summary>Sets the Shim of PolicyBase.PolicyBase(PolicyBuilder policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.ExceptionPredicatesGet">
            <summary>Sets the Shim of PolicyBase.get_ExceptionPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.GetExceptionTypeExceptionPredicatesException">
            <summary>Sets the Shim of PolicyBase.GetExceptionType(ExceptionPredicates exceptionPredicates, Exception exception)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.PolicyKeyGet">
            <summary>Sets the Shim of PolicyBase.get_PolicyKey()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.PolicyKeyMustBeImmutableExceptionString">
            <summary>Sets the Shim of PolicyBase.PolicyKeyMustBeImmutableException(String policyKeyParamName)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.RestorePolicyContextContextStringString">
            <summary>Sets the Shim of PolicyBase.RestorePolicyContext(Context executionContext, String priorPolicyWrapKey, String priorPolicyKey)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of PolicyBase.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBase`1">
            <summary>Shim type of Polly.PolicyBase`1</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBase`1.#ctor(Polly.PolicyBase{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBase`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase`1.AllInstances.ResultPredicatesGet">
            <summary>Sets the Shim of PolicyBase`1.get_ResultPredicates()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBase`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBase`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase`1.ConstructorExceptionPredicatesResultPredicatesOfT0">
            <summary>Sets the Shim of PolicyBase`1.PolicyBase`1(ExceptionPredicates exceptionPredicates, ResultPredicates`1&lt;!0&gt; resultPredicates)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase`1.ConstructorPolicyBuilderOfT0">
            <summary>Sets the Shim of PolicyBase`1.PolicyBase`1(PolicyBuilder`1&lt;!0&gt; policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBase`1.ResultPredicatesGet">
            <summary>Sets the Shim of PolicyBase`1.get_ResultPredicates()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBuilder">
            <summary>Shim type of Polly.PolicyBuilder</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.#ctor(Polly.PolicyBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.AllInstances.EqualsObject">
            <summary>Sets the Shim of PolicyBuilder.Equals(Object obj)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.AllInstances.ExceptionPredicatesGet">
            <summary>Sets the Shim of PolicyBuilder.get_ExceptionPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.AllInstances.GetHashCode01">
            <summary>Sets the Shim of PolicyBuilder.GetHashCode()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.AllInstances.GetType01">
            <summary>Sets the Shim of PolicyBuilder.GetType()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.AllInstances.OrInnerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder,Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.OrInner()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.AllInstances.OrInnerOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder,System.Func{``0,System.Boolean},Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.OrInner(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.AllInstances.OrOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder,Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.Or()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.AllInstances.OrOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder,System.Func{``0,System.Boolean},Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.Or(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.AllInstances.OrResultOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder,System.Func{``0,System.Boolean},Polly.PolicyBuilder{``0}})">
            <summary>Sets the Shim of PolicyBuilder.OrResult(Func`2&lt;!!0,Boolean&gt; resultPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.AllInstances.OrResultOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder,``0,Polly.PolicyBuilder{``0}})">
            <summary>Sets the Shim of PolicyBuilder.OrResult(!!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.AllInstances.ToString01">
            <summary>Sets the Shim of PolicyBuilder.ToString()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.ConstructorExceptionPredicate">
            <summary>Sets the Shim of PolicyBuilder.PolicyBuilder(ExceptionPredicate exceptionPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.EqualsObject">
            <summary>Sets the Shim of PolicyBuilder.Equals(Object obj)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.ExceptionPredicatesGet">
            <summary>Sets the Shim of PolicyBuilder.get_ExceptionPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.GetHashCode">
            <summary>Sets the Shim of PolicyBuilder.GetHashCode()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.GetType">
            <summary>Sets the Shim of PolicyBuilder.GetType()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.HandleInnerFuncOfExceptionBoolean">
            <summary>Sets the Shim of PolicyBuilder.HandleInner(Func`2&lt;Exception,Boolean&gt; predicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.HandleInnerNestedFuncOfExceptionBooleanException">
            <summary>Sets the Shim of PolicyBuilder.HandleInnerNested(Func`2&lt;Exception,Boolean&gt; predicate, Exception current)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.OrInnerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.OrInner()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.OrInnerOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.OrInner(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.OrOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.Or()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.OrOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder})">
            <summary>Sets the Shim of PolicyBuilder.Or(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.OrResultOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder{``0}})">
            <summary>Sets the Shim of PolicyBuilder.OrResult(Func`2&lt;!!0,Boolean&gt; resultPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder.OrResultOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Polly.PolicyBuilder{``0}})">
            <summary>Sets the Shim of PolicyBuilder.OrResult(!!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder.ToString">
            <summary>Sets the Shim of PolicyBuilder.ToString()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBuilder`1">
            <summary>Shim type of Polly.PolicyBuilder`1</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.#ctor(Polly.PolicyBuilder{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyBuilder`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.EqualsObject">
            <summary>Sets the Shim of PolicyBuilder`1.Equals(Object obj)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.ExceptionPredicatesGet">
            <summary>Sets the Shim of PolicyBuilder`1.get_ExceptionPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.GetHashCode01">
            <summary>Sets the Shim of PolicyBuilder`1.GetHashCode()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.GetType01">
            <summary>Sets the Shim of PolicyBuilder`1.GetType()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.OrInnerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.OrInner()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.OrInnerOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0},System.Func{``0,System.Boolean},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.OrInner(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.OrOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.Or()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.OrOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0},System.Func{``0,System.Boolean},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.Or(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.OrResultFuncOfT0Boolean">
            <summary>Sets the Shim of PolicyBuilder`1.OrResult(Func`2&lt;!0,Boolean&gt; resultPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.OrResultT0">
            <summary>Sets the Shim of PolicyBuilder`1.OrResult(!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.ResultPredicatesGet">
            <summary>Sets the Shim of PolicyBuilder`1.get_ResultPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.AllInstances.ToString01">
            <summary>Sets the Shim of PolicyBuilder`1.ToString()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.Constructor">
            <summary>Sets the Shim of PolicyBuilder`1.PolicyBuilder`1()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.ConstructorExceptionPredicate">
            <summary>Sets the Shim of PolicyBuilder`1.PolicyBuilder`1(ExceptionPredicate predicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.ConstructorExceptionPredicates">
            <summary>Sets the Shim of PolicyBuilder`1.PolicyBuilder`1(ExceptionPredicates exceptionPredicates)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.ConstructorFuncOfT0Boolean">
            <summary>Sets the Shim of PolicyBuilder`1.PolicyBuilder`1(Func`2&lt;!0,Boolean&gt; resultPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.EqualsObject">
            <summary>Sets the Shim of PolicyBuilder`1.Equals(Object obj)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.ExceptionPredicatesGet">
            <summary>Sets the Shim of PolicyBuilder`1.get_ExceptionPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.GetHashCode">
            <summary>Sets the Shim of PolicyBuilder`1.GetHashCode()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.GetType">
            <summary>Sets the Shim of PolicyBuilder`1.GetType()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.OrInnerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.OrInner()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.OrInnerOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.OrInner(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.OrOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.Or()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyBuilder`1.OrOf1FuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,System.Boolean},Polly.PolicyBuilder{`0}})">
            <summary>Sets the Shim of PolicyBuilder`1.Or(Func`2&lt;!!0,Boolean&gt; exceptionPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.OrResultFuncOfT0Boolean">
            <summary>Sets the Shim of PolicyBuilder`1.OrResult(Func`2&lt;!0,Boolean&gt; resultPredicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.OrResultT0">
            <summary>Sets the Shim of PolicyBuilder`1.OrResult(!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.ResultPredicatesGet">
            <summary>Sets the Shim of PolicyBuilder`1.get_ResultPredicates()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyBuilder`1.ToString">
            <summary>Sets the Shim of PolicyBuilder`1.ToString()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyResult">
            <summary>Shim type of Polly.PolicyResult</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult.#ctor(Polly.PolicyResult)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyResult.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.AllInstances.ContextGet">
            <summary>Sets the Shim of PolicyResult.get_Context()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.AllInstances.ExceptionTypeGet">
            <summary>Sets the Shim of PolicyResult.get_ExceptionType()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.AllInstances.FinalExceptionGet">
            <summary>Sets the Shim of PolicyResult.get_FinalException()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.AllInstances.OutcomeGet">
            <summary>Sets the Shim of PolicyResult.get_Outcome()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.ConstructorOutcomeTypeExceptionNullableOfExceptionTypeContext">
            <summary>Sets the Shim of PolicyResult.PolicyResult(OutcomeType outcome, Exception finalException, Nullable`1&lt;ExceptionType&gt; exceptionType, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.ContextGet">
            <summary>Sets the Shim of PolicyResult.get_Context()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.ExceptionTypeGet">
            <summary>Sets the Shim of PolicyResult.get_ExceptionType()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.FailureExceptionExceptionTypeContext">
            <summary>Sets the Shim of PolicyResult.Failure(Exception exception, ExceptionType exceptionType, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.FinalExceptionGet">
            <summary>Sets the Shim of PolicyResult.get_FinalException()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.OutcomeGet">
            <summary>Sets the Shim of PolicyResult.get_Outcome()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult.SuccessfulContext">
            <summary>Sets the Shim of PolicyResult.Successful(Context context)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyResult`1">
            <summary>Shim type of Polly.PolicyResult`1</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult`1.#ctor(Polly.PolicyResult{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fakes.ShimPolicyResult`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.AllInstances.ContextGet">
            <summary>Sets the Shim of PolicyResult`1.get_Context()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.AllInstances.ExceptionTypeGet">
            <summary>Sets the Shim of PolicyResult`1.get_ExceptionType()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.AllInstances.FaultTypeGet">
            <summary>Sets the Shim of PolicyResult`1.get_FaultType()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.AllInstances.FinalExceptionGet">
            <summary>Sets the Shim of PolicyResult`1.get_FinalException()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.AllInstances.FinalHandledResultGet">
            <summary>Sets the Shim of PolicyResult`1.get_FinalHandledResult()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.AllInstances.OutcomeGet">
            <summary>Sets the Shim of PolicyResult`1.get_Outcome()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.AllInstances.ResultGet">
            <summary>Sets the Shim of PolicyResult`1.get_Result()</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimPolicyResult`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.ConstructorT0OutcomeTypeExceptionNullableOfExceptionTypeContext">
            <summary>Sets the Shim of PolicyResult`1.PolicyResult`1(!0 result, OutcomeType outcome, Exception finalException, Nullable`1&lt;ExceptionType&gt; exceptionType, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.ConstructorT0OutcomeTypeExceptionNullableOfExceptionTypeT0NullableOfFaultTypeContext">
            <summary>Sets the Shim of PolicyResult`1.PolicyResult`1(!0 result, OutcomeType outcome, Exception finalException, Nullable`1&lt;ExceptionType&gt; exceptionType, !0 finalHandledResult, Nullable`1&lt;FaultType&gt; faultType, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.ContextGet">
            <summary>Sets the Shim of PolicyResult`1.get_Context()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.ExceptionTypeGet">
            <summary>Sets the Shim of PolicyResult`1.get_ExceptionType()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.FailureExceptionExceptionTypeContext">
            <summary>Sets the Shim of PolicyResult`1.Failure(Exception exception, ExceptionType exceptionType, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.FailureT0Context">
            <summary>Sets the Shim of PolicyResult`1.Failure(!0 handledResult, Context context)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.FaultTypeGet">
            <summary>Sets the Shim of PolicyResult`1.get_FaultType()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.FinalExceptionGet">
            <summary>Sets the Shim of PolicyResult`1.get_FinalException()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.FinalHandledResultGet">
            <summary>Sets the Shim of PolicyResult`1.get_FinalHandledResult()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.OutcomeGet">
            <summary>Sets the Shim of PolicyResult`1.get_Outcome()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.ResultGet">
            <summary>Sets the Shim of PolicyResult`1.get_Result()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimPolicyResult`1.SuccessfulT0Context">
            <summary>Sets the Shim of PolicyResult`1.Successful(!0 result, Context context)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimResiliencePipelineConversionExtensions">
            <summary>Shim type of Polly.ResiliencePipelineConversionExtensions</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResiliencePipelineConversionExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResiliencePipelineConversionExtensions.AsAsyncPolicyOf1ResiliencePipelineOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ResiliencePipeline{``0},Polly.IAsyncPolicy{``0}})">
            <summary>Sets the Shim of ResiliencePipelineConversionExtensions.AsAsyncPolicy(ResiliencePipeline`1&lt;!!0&gt; strategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResiliencePipelineConversionExtensions.AsAsyncPolicyResiliencePipeline">
            <summary>Sets the Shim of ResiliencePipelineConversionExtensions.AsAsyncPolicy(ResiliencePipeline strategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResiliencePipelineConversionExtensions.AsSyncPolicyOf1ResiliencePipelineOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.ResiliencePipeline{``0},Polly.ISyncPolicy{``0}})">
            <summary>Sets the Shim of ResiliencePipelineConversionExtensions.AsSyncPolicy(ResiliencePipeline`1&lt;!!0&gt; strategy)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResiliencePipelineConversionExtensions.AsSyncPolicyResiliencePipeline">
            <summary>Sets the Shim of ResiliencePipelineConversionExtensions.AsSyncPolicy(ResiliencePipeline strategy)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResiliencePipelineConversionExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResiliencePipelineConversionExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResiliencePipelineConversionExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Polly.Fakes.ShimResultPredicates`1">
            <summary>Shim type of Polly.ResultPredicates`1</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResultPredicates`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResultPredicates`1.#ctor(Polly.ResultPredicates{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResultPredicates`1.AddResultPredicateOfT0">
            <summary>Sets the Shim of ResultPredicates`1.Add(ResultPredicate`1&lt;!0&gt; predicate)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimResultPredicates`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResultPredicates`1.AllInstances.AddResultPredicateOfT0">
            <summary>Sets the Shim of ResultPredicates`1.Add(ResultPredicate`1&lt;!0&gt; predicate)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResultPredicates`1.AllInstances.AnyMatchT0">
            <summary>Sets the Shim of ResultPredicates`1.AnyMatch(!0 result)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResultPredicates`1.AnyMatchT0">
            <summary>Sets the Shim of ResultPredicates`1.AnyMatch(!0 result)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResultPredicates`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimResultPredicates`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResultPredicates`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResultPredicates`1.Constructor">
            <summary>Sets the Shim of ResultPredicates`1.ResultPredicates`1()</summary>
        </member>
        <member name="P:Polly.Fakes.ShimResultPredicates`1.StaticConstructor">
            <summary>Sets the Shim of ResultPredicates`1.ResultPredicates`1()</summary>
        </member>
        <member name="T:Polly.Fakes.ShimRetrySyntax">
            <summary>Shim type of Polly.RetrySyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetrySyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetrySyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetrySyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryForeverPolicyBuilder">
            <summary>Sets the Shim of RetrySyntax.RetryForever(PolicyBuilder policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryForeverPolicyBuilderActionOfException">
            <summary>Sets the Shim of RetrySyntax.RetryForever(PolicyBuilder policyBuilder, Action`1&lt;Exception&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryForeverPolicyBuilderActionOfExceptionContext">
            <summary>Sets the Shim of RetrySyntax.RetryForever(PolicyBuilder policyBuilder, Action`2&lt;Exception,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryForeverPolicyBuilderActionOfExceptionInt32">
            <summary>Sets the Shim of RetrySyntax.RetryForever(PolicyBuilder policyBuilder, Action`2&lt;Exception,Int32&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryForeverPolicyBuilderActionOfExceptionInt32Context">
            <summary>Sets the Shim of RetrySyntax.RetryForever(PolicyBuilder policyBuilder, Action`3&lt;Exception,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryPolicyBuilder">
            <summary>Sets the Shim of RetrySyntax.Retry(PolicyBuilder policyBuilder)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryPolicyBuilderActionOfExceptionInt32">
            <summary>Sets the Shim of RetrySyntax.Retry(PolicyBuilder policyBuilder, Action`2&lt;Exception,Int32&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryPolicyBuilderActionOfExceptionInt32Context">
            <summary>Sets the Shim of RetrySyntax.Retry(PolicyBuilder policyBuilder, Action`3&lt;Exception,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryPolicyBuilderInt32">
            <summary>Sets the Shim of RetrySyntax.Retry(PolicyBuilder policyBuilder, Int32 retryCount)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryPolicyBuilderInt32ActionOfExceptionInt32">
            <summary>Sets the Shim of RetrySyntax.Retry(PolicyBuilder policyBuilder, Int32 retryCount, Action`2&lt;Exception,Int32&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.RetryPolicyBuilderInt32ActionOfExceptionInt32Context">
            <summary>Sets the Shim of RetrySyntax.Retry(PolicyBuilder policyBuilder, Int32 retryCount, Action`3&lt;Exception,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32ContextTimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32ContextTimeSpanActionOfExceptionInt32TimeSpanContext">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,Int32,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32ContextTimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32ExceptionContextTimeSpanActionOfExceptionInt32TimeSpanContext">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,Int32,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32ExceptionContextTimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32TimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32TimeSpanActionOfExceptionInt32TimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,Int32,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryForeverPolicyBuilderFuncOfInt32TimeSpanActionOfExceptionTimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetryForever(PolicyBuilder policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;Exception,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderIEnumerableOfTimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderIEnumerableOfTimeSpanActionOfExceptionTimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`2&lt;Exception,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderIEnumerableOfTimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderIEnumerableOfTimeSpanActionOfExceptionTimeSpanInt32Context">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32ContextTimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32ContextTimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32ContextTimeSpanActionOfExceptionTimeSpanInt32Context">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32ExceptionContextTimeSpanActionOfExceptionTimeSpanInt32Context">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32TimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32TimeSpanActionOfExceptionTimeSpan">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;Exception,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32TimeSpanActionOfExceptionTimeSpanContext">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;Exception,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetrySyntax.WaitAndRetryPolicyBuilderInt32FuncOfInt32TimeSpanActionOfExceptionTimeSpanInt32Context">
            <summary>Sets the Shim of RetrySyntax.WaitAndRetry(PolicyBuilder policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="T:Polly.Fakes.ShimRetryTResultSyntax">
            <summary>Shim type of Polly.RetryTResultSyntax</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fakes.ShimRetryTResultSyntax.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryForeverOf1PolicyBuilderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.RetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryForeverOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0}},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.RetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`1&lt;DelegateResult`1&lt;!!0&gt;&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryForeverOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.RetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryForeverOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.RetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Int32&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryForeverOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.RetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryOf1PolicyBuilderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.Retry(PolicyBuilder`1&lt;!!0&gt; policyBuilder)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.Retry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Int32&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryOf1PolicyBuilderOfM0ActionOfDelegateResultOfM0Int32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Action{Polly.DelegateResult{``0},System.Int32,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.Retry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryOf1PolicyBuilderOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.Retry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryOf1PolicyBuilderOfM0Int32ActionOfDelegateResultOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Action{Polly.DelegateResult{``0},System.Int32},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.Retry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Action`2&lt;DelegateResult`1&lt;!!0&gt;,Int32&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.RetryOf1PolicyBuilderOfM0Int32ActionOfDelegateResultOfM0Int32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Action{Polly.DelegateResult{``0},System.Int32,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.Retry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0Int32TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.Int32,System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32DelegateResultOfM0ContextTimeSpanActionOfDelegateResultOfM0Int32TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.Int32,System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32DelegateResultOfM0ContextTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32TimeSpanActionOfDelegateResultOfM0Int32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.Int32,System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,Int32,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryForeverOf1PolicyBuilderOfM0FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetryForever(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0IEnumerableOfTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0IEnumerableOfTimeSpanActionOfDelegateResultOfM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0IEnumerableOfTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0IEnumerableOfTimeSpanActionOfDelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, IEnumerable`1&lt;TimeSpan&gt; sleepDurations, Action`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32ContextTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.Context,System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32ContextTimeSpanActionOfDelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`3&lt;Int32,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32DelegateResultOfM0ContextTimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32DelegateResultOfM0ContextTimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32DelegateResultOfM0ContextTimeSpanActionOfDelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`4&lt;Int32,DelegateResult`1&lt;!!0&gt;,Context,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`2&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpanContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`3&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Context&gt; onRetry)</summary>
        </member>
        <member name="M:Polly.Fakes.ShimRetryTResultSyntax.WaitAndRetryOf1PolicyBuilderOfM0Int32FuncOfInt32TimeSpanActionOfDelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.PolicyBuilder{``0},System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context},Polly.Retry.RetryPolicy{``0}})">
            <summary>Sets the Shim of RetryTResultSyntax.WaitAndRetry(PolicyBuilder`1&lt;!!0&gt; policyBuilder, Int32 retryCount, Func`2&lt;Int32,TimeSpan&gt; sleepDurationProvider, Action`4&lt;DelegateResult`1&lt;!!0&gt;,TimeSpan,Int32,Context&gt; onRetry)</summary>
        </member>
        <member name="T:Polly.Fakes.StubAsyncPolicy">
            <summary>Stub type of Polly.AsyncPolicy</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy.#ctor(Polly.PolicyBuilder)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubAsyncPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy.ImplementationAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of AsyncPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy.ImplementationAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of AsyncPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubAsyncPolicy.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the stub of AsyncPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncPolicy</summary>
        </member>
        <member name="P:Polly.Fakes.StubAsyncPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubAsyncPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubAsyncPolicy`1">
            <summary>Stub type of Polly.AsyncPolicy`1</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy`1.#ctor(Polly.PolicyBuilder{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubAsyncPolicy`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy`1.ImplementationAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of AsyncPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubAsyncPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the stub of AsyncPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubAsyncPolicy`1.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncPolicy</summary>
        </member>
        <member name="P:Polly.Fakes.StubAsyncPolicy`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubAsyncPolicy`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubContext">
            <summary>Stub type of Polly.Context</summary>
        </member>
        <member name="M:Polly.Fakes.StubContext.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.Fakes.StubContext.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.Fakes.StubContext.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubContext.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubContext.InitializeStub">
            <summary>Initializes a new instance of type StubContext</summary>
        </member>
        <member name="P:Polly.Fakes.StubContext.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubContext.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubDelegateResult`1">
            <summary>Stub type of Polly.DelegateResult`1</summary>
        </member>
        <member name="M:Polly.Fakes.StubDelegateResult`1.#ctor(`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.Fakes.StubDelegateResult`1.#ctor(System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubDelegateResult`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubDelegateResult`1.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateResult</summary>
        </member>
        <member name="P:Polly.Fakes.StubDelegateResult`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubDelegateResult`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubExceptionPredicates">
            <summary>Stub type of Polly.ExceptionPredicates</summary>
        </member>
        <member name="M:Polly.Fakes.StubExceptionPredicates.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubExceptionPredicates.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubExceptionPredicates.InitializeStub">
            <summary>Initializes a new instance of type StubExceptionPredicates</summary>
        </member>
        <member name="P:Polly.Fakes.StubExceptionPredicates.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubExceptionPredicates.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubIAsyncPolicy">
            <summary>Stub type of Polly.IAsyncPolicy</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.#ctor">
            <summary>Initializes a new instance of type StubIAsyncPolicy</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskCancellationToken">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskContextCancellationToken">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextTaskContext">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfContextTaskIDictionaryOfStringObject">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncFuncOfTask">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextTaskOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfContextTaskOfM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAndCaptureAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{Polly.PolicyResult{``0}}})">
            <summary>Sets stubs of ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfCancellationTokenTaskCancellationToken">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfCancellationTokenTaskCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskContextCancellationToken">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfContextCancellationTokenTaskIDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfContextTaskContext">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfContextTaskIDictionaryOfStringObject">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncFuncOfTask">
            <summary>Sets the stub of IAsyncPolicy.ExecuteAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfCancellationTokenTaskOfM0CancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfContextCancellationTokenTaskOfM0IDictionaryOfStringObjectCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfContextTaskOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfContextTaskOfM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.ExecuteAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of ExecuteAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.StubIAsyncPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.Tasks.Task},Polly.Context)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAndCaptureAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`1&lt;Task&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{Polly.Context,System.Threading.Tasks.Task},Polly.Context)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{Polly.Context,System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},Polly.Context)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{Polly.Context,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#ExecuteAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy.Polly#IAsyncPolicy#WithPolicyKey(System.String)">
            <summary>Sets the Stub of IAsyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy.WithPolicyKeyString">
            <summary>Sets the stub of IAsyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="T:Polly.Fakes.StubIAsyncPolicy`1">
            <summary>Stub type of Polly.IAsyncPolicy`1</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubIAsyncPolicy</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskOfT0CancellationToken">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfCancellationTokenTaskOfT0CancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationToken">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextTaskOfT0Context">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfContextTaskOfT0IDictionaryOfStringObject">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAndCaptureAsyncFuncOfTaskOfT0">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfCancellationTokenTaskOfT0CancellationToken">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfCancellationTokenTaskOfT0CancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationToken">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfContextCancellationTokenTaskOfT0IDictionaryOfStringObjectCancellationTokenBoolean">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfContextTaskOfT0Context">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfContextTaskOfT0IDictionaryOfStringObject">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.ExecuteAsyncFuncOfTaskOfT0">
            <summary>Sets the stub of IAsyncPolicy`1.ExecuteAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.StubIAsyncPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.Tasks.Task{`0}},Polly.Context)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.Tasks.Task{`0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAndCaptureAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAndCaptureAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`1&lt;Task`1&lt;!0&gt;&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{Polly.Context,System.Threading.Tasks.Task{`0}},Polly.Context)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{Polly.Context,System.Threading.Tasks.Task{`0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;Context,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`2&lt;CancellationToken,Task`1&lt;!0&gt;&gt; action, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#ExecuteAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean)">
            <summary>Sets the Stub of IAsyncPolicy`1.ExecuteAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fakes.StubIAsyncPolicy`1.Polly#IAsyncPolicy{TResult}#WithPolicyKey(System.String)">
            <summary>Sets the Stub of IAsyncPolicy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="F:Polly.Fakes.StubIAsyncPolicy`1.WithPolicyKeyString">
            <summary>Sets the stub of IAsyncPolicy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="T:Polly.Fakes.StubISyncPolicy">
            <summary>Stub type of Polly.ISyncPolicy</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.#ctor">
            <summary>Initializes a new instance of type StubISyncPolicy</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteAction">
            <summary>Sets the stub of ISyncPolicy.Execute(Action action)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteActionOfCancellationTokenCancellationToken">
            <summary>Sets the stub of ISyncPolicy.Execute(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the stub of ISyncPolicy.Execute(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteActionOfContextCancellationTokenIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of ISyncPolicy.Execute(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteActionOfContextContext">
            <summary>Sets the stub of ISyncPolicy.Execute(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteActionOfContextIDictionaryOfStringObject">
            <summary>Sets the stub of ISyncPolicy.Execute(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureAction">
            <summary>Sets the stub of ISyncPolicy.ExecuteAndCapture(Action action)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureActionOfCancellationTokenCancellationToken">
            <summary>Sets the stub of ISyncPolicy.ExecuteAndCapture(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the stub of ISyncPolicy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureActionOfContextCancellationTokenIDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of ISyncPolicy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureActionOfContextContext">
            <summary>Sets the stub of ISyncPolicy.ExecuteAndCapture(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureActionOfContextIDictionaryOfStringObject">
            <summary>Sets the stub of ISyncPolicy.ExecuteAndCapture(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureOf1FuncOfCancellationTokenM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets stubs of ExecuteAndCapture(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets stubs of ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureOf1FuncOfContextCancellationTokenM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,Polly.PolicyResult{``0}})">
            <summary>Sets stubs of ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureOf1FuncOfContextM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},Polly.Context,Polly.PolicyResult{``0}})">
            <summary>Sets stubs of ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureOf1FuncOfContextM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object},Polly.PolicyResult{``0}})">
            <summary>Sets stubs of ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteAndCaptureOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},Polly.PolicyResult{``0}})">
            <summary>Sets stubs of ExecuteAndCapture(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteOf1FuncOfCancellationTokenM0CancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,``0})">
            <summary>Sets stubs of Execute(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets stubs of Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteOf1FuncOfContextCancellationTokenM0IDictionaryOfStringObjectCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,``0})">
            <summary>Sets stubs of Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteOf1FuncOfContextM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},Polly.Context,``0})">
            <summary>Sets stubs of Execute(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteOf1FuncOfContextM0IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object},``0})">
            <summary>Sets stubs of Execute(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.ExecuteOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0})">
            <summary>Sets stubs of Execute(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.StubISyncPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute``1(System.Func{Polly.Context,``0},Polly.Context)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute(System.Action)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Action action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute``1(System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute``1(System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of ISyncPolicy.Execute(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute(System.Action{System.Threading.CancellationToken},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute(System.Action{Polly.Context},Polly.Context)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute``1(System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute(System.Action{Polly.Context,System.Threading.CancellationToken},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute``1(System.Func{``0})">
            <summary>Sets the Stub of ISyncPolicy.Execute(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute(System.Action{Polly.Context},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of ISyncPolicy.Execute(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute``1(System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#Execute(System.Action{Polly.Context,System.Threading.CancellationToken},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.Execute(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture(System.Action)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Action action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture(System.Action{Polly.Context},Polly.Context)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Action`1&lt;Context&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture(System.Action{Polly.Context},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Action`1&lt;Context&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture(System.Action{System.Threading.CancellationToken},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Action`1&lt;CancellationToken&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture(System.Action{Polly.Context,System.Threading.CancellationToken},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture(System.Action{Polly.Context,System.Threading.CancellationToken},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Action`2&lt;Context,CancellationToken&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture``1(System.Func{``0})">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Func`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture``1(System.Func{Polly.Context,``0},Polly.Context)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture``1(System.Func{Polly.Context,``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Func`2&lt;Context,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture``1(System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Func`2&lt;CancellationToken,!!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture``1(System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#ExecuteAndCapture``1(System.Func{Polly.Context,System.Threading.CancellationToken,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy.Polly#ISyncPolicy#WithPolicyKey(System.String)">
            <summary>Sets the Stub of ISyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy.WithPolicyKeyString">
            <summary>Sets the stub of ISyncPolicy.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="T:Polly.Fakes.StubISyncPolicy`1">
            <summary>Stub type of Polly.ISyncPolicy`1</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubISyncPolicy</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteAndCaptureFuncOfCancellationTokenT0CancellationToken">
            <summary>Sets the stub of ISyncPolicy`1.ExecuteAndCapture(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteAndCaptureFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the stub of ISyncPolicy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteAndCaptureFuncOfContextCancellationTokenT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of ISyncPolicy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteAndCaptureFuncOfContextT0Context">
            <summary>Sets the stub of ISyncPolicy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteAndCaptureFuncOfContextT0IDictionaryOfStringObject">
            <summary>Sets the stub of ISyncPolicy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteAndCaptureFuncOfT0">
            <summary>Sets the stub of ISyncPolicy`1.ExecuteAndCapture(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteFuncOfCancellationTokenT0CancellationToken">
            <summary>Sets the stub of ISyncPolicy`1.Execute(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the stub of ISyncPolicy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteFuncOfContextCancellationTokenT0IDictionaryOfStringObjectCancellationToken">
            <summary>Sets the stub of ISyncPolicy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteFuncOfContextT0Context">
            <summary>Sets the stub of ISyncPolicy`1.Execute(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteFuncOfContextT0IDictionaryOfStringObject">
            <summary>Sets the stub of ISyncPolicy`1.Execute(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.ExecuteFuncOfT0">
            <summary>Sets the stub of ISyncPolicy`1.Execute(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="P:Polly.Fakes.StubISyncPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#Execute(System.Func{`0})">
            <summary>Sets the Stub of ISyncPolicy`1.Execute(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#Execute(System.Func{System.Threading.CancellationToken,`0},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy`1.Execute(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#Execute(System.Func{Polly.Context,`0},Polly.Context)">
            <summary>Sets the Stub of ISyncPolicy`1.Execute(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#Execute(System.Func{Polly.Context,`0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of ISyncPolicy`1.Execute(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#Execute(System.Func{Polly.Context,System.Threading.CancellationToken,`0},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#Execute(System.Func{Polly.Context,System.Threading.CancellationToken,`0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy`1.Execute(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#ExecuteAndCapture(System.Func{`0})">
            <summary>Sets the Stub of ISyncPolicy`1.ExecuteAndCapture(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#ExecuteAndCapture(System.Func{Polly.Context,`0},Polly.Context)">
            <summary>Sets the Stub of ISyncPolicy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, Context context)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#ExecuteAndCapture(System.Func{System.Threading.CancellationToken,`0},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy`1.ExecuteAndCapture(Func`2&lt;CancellationToken,!0&gt; action, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#ExecuteAndCapture(System.Func{Polly.Context,`0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the Stub of ISyncPolicy`1.ExecuteAndCapture(Func`2&lt;Context,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#ExecuteAndCapture(System.Func{Polly.Context,System.Threading.CancellationToken,`0},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#ExecuteAndCapture(System.Func{Polly.Context,System.Threading.CancellationToken,`0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>Sets the Stub of ISyncPolicy`1.ExecuteAndCapture(Func`3&lt;Context,CancellationToken,!0&gt; action, IDictionary`2&lt;String,Object&gt; contextData, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubISyncPolicy`1.Polly#ISyncPolicy{TResult}#WithPolicyKey(System.String)">
            <summary>Sets the Stub of ISyncPolicy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="F:Polly.Fakes.StubISyncPolicy`1.WithPolicyKeyString">
            <summary>Sets the stub of ISyncPolicy`1.WithPolicyKey(String policyKey)</summary>
        </member>
        <member name="T:Polly.Fakes.StubIsPolicy">
            <summary>Stub type of Polly.IsPolicy</summary>
        </member>
        <member name="M:Polly.Fakes.StubIsPolicy.#ctor">
            <summary>Initializes a new instance of type StubIsPolicy</summary>
        </member>
        <member name="P:Polly.Fakes.StubIsPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Fakes.StubIsPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Fakes.StubPolicy">
            <summary>Stub type of Polly.Policy</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy.#ctor(Polly.PolicyBuilder)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy.Implementation``1(System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of Policy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy.Implementation(System.Action{Polly.Context,System.Threading.CancellationToken},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of Policy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubPolicy.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the stub of Policy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets stubs of Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubPolicy</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubPolicy`1">
            <summary>Stub type of Polly.Policy`1</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy`1.#ctor(Polly.PolicyBuilder{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicy`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy`1.Implementation(System.Func{Polly.Context,System.Threading.CancellationToken,`0},Polly.Context,System.Threading.CancellationToken)">
            <summary>Sets the Stub of Policy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:Polly.Fakes.StubPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the stub of Policy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicy`1.InitializeStub">
            <summary>Initializes a new instance of type StubPolicy</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicy`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicy`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubPolicyBase">
            <summary>Stub type of Polly.PolicyBase</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicyBase.#ctor(Polly.PolicyBuilder)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicyBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicyBase.InitializeStub">
            <summary>Initializes a new instance of type StubPolicyBase</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicyBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicyBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubPolicyBase`1">
            <summary>Stub type of Polly.PolicyBase`1</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicyBase`1.#ctor(Polly.PolicyBuilder{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicyBase`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubPolicyBase`1.InitializeStub">
            <summary>Initializes a new instance of type StubPolicyBase</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicyBase`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubPolicyBase`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fakes.StubResultPredicates`1">
            <summary>Stub type of Polly.ResultPredicates`1</summary>
        </member>
        <member name="M:Polly.Fakes.StubResultPredicates`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Fakes.StubResultPredicates`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Fakes.StubResultPredicates`1.InitializeStub">
            <summary>Initializes a new instance of type StubResultPredicates</summary>
        </member>
        <member name="P:Polly.Fakes.StubResultPredicates`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Fakes.StubResultPredicates`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy">
            <summary>Shim type of Polly.Fallback.AsyncFallbackPolicy</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.#ctor(Polly.Fallback.AsyncFallbackPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncFallbackPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Fallback.AsyncFallbackPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncFallbackPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.Bind(Polly.Fallback.IFallbackPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.ConstructorPolicyBuilderFuncOfExceptionContextTaskFuncOfExceptionContextCancellationTokenTask">
            <summary>Sets the Shim of AsyncFallbackPolicy.AsyncFallbackPolicy(PolicyBuilder policyBuilder, Func`3&lt;Exception,Context,Task&gt; onFallbackAsync, Func`4&lt;Exception,Context,CancellationToken,Task&gt; fallbackAction)</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncFallbackPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncFallbackPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1">
            <summary>Shim type of Polly.Fallback.AsyncFallbackPolicy`1</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.#ctor(Polly.Fallback.AsyncFallbackPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncFallbackPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.Bind(Polly.Fallback.IFallbackPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.Bind(Polly.Fallback.IFallbackPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.ConstructorPolicyBuilderOfT0FuncOfDelegateResultOfT0ContextTaskFuncOfDelegateResultOfT0ContextCancellationTokenTaskOfT0">
            <summary>Sets the Shim of AsyncFallbackPolicy`1.AsyncFallbackPolicy`1(PolicyBuilder`1&lt;!0&gt; policyBuilder, Func`3&lt;DelegateResult`1&lt;!0&gt;,Context,Task&gt; onFallbackAsync, Func`4&lt;DelegateResult`1&lt;!0&gt;,Context,CancellationToken,Task`1&lt;!0&gt;&gt; fallbackAction)</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimAsyncFallbackPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncFallbackPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimFallbackPolicy">
            <summary>Shim type of Polly.Fallback.FallbackPolicy</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.#ctor(Polly.Fallback.FallbackPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimFallbackPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy.AllInstances.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of FallbackPolicy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Fallback.FallbackPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of FallbackPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.Bind(Polly.Fallback.IFallbackPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy.ConstructorPolicyBuilderActionOfExceptionContextActionOfExceptionContextCancellationToken">
            <summary>Sets the Shim of FallbackPolicy.FallbackPolicy(PolicyBuilder policyBuilder, Action`2&lt;Exception,Context&gt; onFallback, Action`3&lt;Exception,Context,CancellationToken&gt; fallbackAction)</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of FallbackPolicy.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of FallbackPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimFallbackPolicy`1">
            <summary>Shim type of Polly.Fallback.FallbackPolicy`1</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.#ctor(Polly.Fallback.FallbackPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.ShimFallbackPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of FallbackPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.Bind(Polly.Fallback.IFallbackPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.ShimFallbackPolicy`1.Bind(Polly.Fallback.IFallbackPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy`1.ConstructorPolicyBuilderOfT0ActionOfDelegateResultOfT0ContextFuncOfDelegateResultOfT0ContextCancellationTokenT0">
            <summary>Sets the Shim of FallbackPolicy`1.FallbackPolicy`1(PolicyBuilder`1&lt;!0&gt; policyBuilder, Action`2&lt;DelegateResult`1&lt;!0&gt;,Context&gt; onFallback, Func`4&lt;DelegateResult`1&lt;!0&gt;,Context,CancellationToken,!0&gt; fallbackAction)</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.ShimFallbackPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of FallbackPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.StubIFallbackPolicy">
            <summary>Stub type of Polly.Fallback.IFallbackPolicy</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.StubIFallbackPolicy.#ctor">
            <summary>Initializes a new instance of type StubIFallbackPolicy</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.StubIFallbackPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Fallback.Fakes.StubIFallbackPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Fallback.Fakes.StubIFallbackPolicy`1">
            <summary>Stub type of Polly.Fallback.IFallbackPolicy`1</summary>
        </member>
        <member name="M:Polly.Fallback.Fakes.StubIFallbackPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubIFallbackPolicy</summary>
        </member>
        <member name="P:Polly.Fallback.Fakes.StubIFallbackPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Fallback.Fakes.StubIFallbackPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy">
            <summary>Shim type of Polly.NoOp.AsyncNoOpPolicy</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.#ctor(Polly.NoOp.AsyncNoOpPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.NoOp.AsyncNoOpPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncNoOpPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.Bind(Polly.NoOp.INoOpPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.Constructor">
            <summary>Sets the Shim of AsyncNoOpPolicy.AsyncNoOpPolicy()</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncNoOpPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1">
            <summary>Shim type of Polly.NoOp.AsyncNoOpPolicy`1</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.#ctor(Polly.NoOp.AsyncNoOpPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncNoOpPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.Bind(Polly.NoOp.INoOpPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.Bind(Polly.NoOp.INoOpPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.Constructor">
            <summary>Sets the Shim of AsyncNoOpPolicy`1.AsyncNoOpPolicy`1()</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimAsyncNoOpPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncNoOpPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimNoOpPolicy">
            <summary>Shim type of Polly.NoOp.NoOpPolicy</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.#ctor(Polly.NoOp.NoOpPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimNoOpPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.NoOp.NoOpPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of NoOpPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimNoOpPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.Bind(Polly.NoOp.INoOpPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimNoOpPolicy.Constructor">
            <summary>Sets the Shim of NoOpPolicy.NoOpPolicy()</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of NoOpPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimNoOpPolicy`1">
            <summary>Shim type of Polly.NoOp.NoOpPolicy`1</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.#ctor(Polly.NoOp.NoOpPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.ShimNoOpPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimNoOpPolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of NoOpPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimNoOpPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.Bind(Polly.NoOp.INoOpPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.ShimNoOpPolicy`1.Bind(Polly.NoOp.INoOpPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimNoOpPolicy`1.Constructor">
            <summary>Sets the Shim of NoOpPolicy`1.NoOpPolicy`1()</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.ShimNoOpPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of NoOpPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.StubINoOpPolicy">
            <summary>Stub type of Polly.NoOp.INoOpPolicy</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.StubINoOpPolicy.#ctor">
            <summary>Initializes a new instance of type StubINoOpPolicy</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.StubINoOpPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.NoOp.Fakes.StubINoOpPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.NoOp.Fakes.StubINoOpPolicy`1">
            <summary>Stub type of Polly.NoOp.INoOpPolicy`1</summary>
        </member>
        <member name="M:Polly.NoOp.Fakes.StubINoOpPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubINoOpPolicy</summary>
        </member>
        <member name="P:Polly.NoOp.Fakes.StubINoOpPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.NoOp.Fakes.StubINoOpPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy">
            <summary>Shim type of Polly.RateLimit.AsyncRateLimitPolicy</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.#ctor(Polly.RateLimit.AsyncRateLimitPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.RateLimit.AsyncRateLimitPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncRateLimitPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.Bind(Polly.RateLimit.IRateLimitPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncRateLimitPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1">
            <summary>Shim type of Polly.RateLimit.AsyncRateLimitPolicy`1</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.#ctor(Polly.RateLimit.AsyncRateLimitPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncRateLimitPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.Bind(Polly.RateLimit.IRateLimitPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.Bind(Polly.RateLimit.IRateLimitPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimAsyncRateLimitPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncRateLimitPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimRateLimitPolicy">
            <summary>Shim type of Polly.RateLimit.RateLimitPolicy</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.#ctor(Polly.RateLimit.RateLimitPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimRateLimitPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.RateLimit.RateLimitPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of RateLimitPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.Bind(Polly.RateLimit.IRateLimitPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of RateLimitPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1">
            <summary>Shim type of Polly.RateLimit.RateLimitPolicy`1</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.#ctor(Polly.RateLimit.RateLimitPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of RateLimitPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.Bind(Polly.RateLimit.IRateLimitPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.Bind(Polly.RateLimit.IRateLimitPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of RateLimitPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimRateLimitRejectedException">
            <summary>Shim type of Polly.RateLimit.RateLimitRejectedException</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.#ctor(Polly.RateLimit.RateLimitRejectedException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.AllInstances.RetryAfterGet">
            <summary>Sets the Shim of RateLimitRejectedException.get_RetryAfter()</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.AllInstances.RetryAfterSetTimeSpan">
            <summary>Sets the Shim of RateLimitRejectedException.set_RetryAfter(TimeSpan value)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.AllInstances.SetRetryAfterTimeSpan">
            <summary>Sets the Shim of RateLimitRejectedException.SetRetryAfter(TimeSpan retryAfter)</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.ConstructorTimeSpan">
            <summary>Sets the Shim of RateLimitRejectedException.RateLimitRejectedException(TimeSpan retryAfter)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.ConstructorTimeSpanException">
            <summary>Sets the Shim of RateLimitRejectedException.RateLimitRejectedException(TimeSpan retryAfter, Exception innerException)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.ConstructorTimeSpanString">
            <summary>Sets the Shim of RateLimitRejectedException.RateLimitRejectedException(TimeSpan retryAfter, String message)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.ConstructorTimeSpanStringException">
            <summary>Sets the Shim of RateLimitRejectedException.RateLimitRejectedException(TimeSpan retryAfter, String message, Exception innerException)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.DefaultMessageTimeSpan">
            <summary>Sets the Shim of RateLimitRejectedException.DefaultMessage(TimeSpan retryAfter)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.RetryAfterGet">
            <summary>Sets the Shim of RateLimitRejectedException.get_RetryAfter()</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.RetryAfterSetTimeSpan">
            <summary>Sets the Shim of RateLimitRejectedException.set_RetryAfter(TimeSpan value)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.ShimRateLimitRejectedException.SetRetryAfterTimeSpan">
            <summary>Sets the Shim of RateLimitRejectedException.SetRetryAfter(TimeSpan retryAfter)</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.StubIRateLimitPolicy">
            <summary>Stub type of Polly.RateLimit.IRateLimitPolicy</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubIRateLimitPolicy.#ctor">
            <summary>Initializes a new instance of type StubIRateLimitPolicy</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubIRateLimitPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubIRateLimitPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.StubIRateLimitPolicy`1">
            <summary>Stub type of Polly.RateLimit.IRateLimitPolicy`1</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubIRateLimitPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubIRateLimitPolicy</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubIRateLimitPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubIRateLimitPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.RateLimit.Fakes.StubRateLimitRejectedException">
            <summary>Stub type of Polly.RateLimit.RateLimitRejectedException</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.#ctor(System.TimeSpan)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.#ctor(System.TimeSpan,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.#ctor(System.TimeSpan,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.#ctor(System.TimeSpan,System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubRateLimitRejectedException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubRateLimitRejectedException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.GetBaseException">
            <summary>Sets the Stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the Stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.InitializeStub">
            <summary>Initializes a new instance of type StubRateLimitRejectedException</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Polly.RateLimit.Fakes.StubRateLimitRejectedException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Polly.RateLimit.Fakes.StubRateLimitRejectedException.ToString">
            <summary>Sets the Stub of Exception.ToString()</summary>
        </member>
        <member name="F:Polly.RateLimit.Fakes.StubRateLimitRejectedException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:Polly.Registry.Fakes.ShimPolicyRegistry">
            <summary>Shim type of Polly.Registry.PolicyRegistry</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.#ctor(Polly.Registry.PolicyRegistry)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the Shim of PolicyRegistry.Add(String key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AddOrUpdateOf1StringFuncOfStringM0FuncOfStringM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Func{System.String,``0},System.Func{System.String,``0,``0},``0})">
            <summary>Sets the Shim of PolicyRegistry.AddOrUpdate(String key, Func`2&lt;String,!!0&gt; addPolicyFactory, Func`3&lt;String,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AddOrUpdateOf1StringM0FuncOfStringM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,System.Func{System.String,``0,``0},``0})">
            <summary>Sets the Shim of PolicyRegistry.AddOrUpdate(String key, !!0 addPolicy, Func`3&lt;String,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="T:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.AddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Polly.Registry.PolicyRegistry,System.String,``0})">
            <summary>Sets the Shim of PolicyRegistry.Add(String key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.AddOrUpdateOf1StringFuncOfStringM0FuncOfStringM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Registry.PolicyRegistry,System.String,System.Func{System.String,``0},System.Func{System.String,``0,``0},``0})">
            <summary>Sets the Shim of PolicyRegistry.AddOrUpdate(String key, Func`2&lt;String,!!0&gt; addPolicyFactory, Func`3&lt;String,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.AddOrUpdateOf1StringM0FuncOfStringM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Registry.PolicyRegistry,System.String,``0,System.Func{System.String,``0,``0},``0})">
            <summary>Sets the Shim of PolicyRegistry.AddOrUpdate(String key, !!0 addPolicy, Func`3&lt;String,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.Clear">
            <summary>Sets the Shim of PolicyRegistry.Clear()</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.ContainsKeyString">
            <summary>Sets the Shim of PolicyRegistry.ContainsKey(String key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.CountGet">
            <summary>Sets the Shim of PolicyRegistry.get_Count()</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.GetEnumerator">
            <summary>Sets the Shim of PolicyRegistry.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Registry.PolicyRegistry,System.String,``0})">
            <summary>Sets the Shim of PolicyRegistry.Get(String key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.GetOrAddOf1StringFuncOfStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Registry.PolicyRegistry,System.String,System.Func{System.String,``0},``0})">
            <summary>Sets the Shim of PolicyRegistry.GetOrAdd(String key, Func`2&lt;String,!!0&gt; policyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.GetOrAddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Registry.PolicyRegistry,System.String,``0,``0})">
            <summary>Sets the Shim of PolicyRegistry.GetOrAdd(String key, !!0 policy)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.ItemGetString">
            <summary>Sets the Shim of PolicyRegistry.get_Item(String key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.ItemSetStringIsPolicy">
            <summary>Sets the Shim of PolicyRegistry.set_Item(String key, IsPolicy value)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.RemoveString">
            <summary>Sets the Shim of PolicyRegistry.Remove(String key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the Shim of PolicyRegistry.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.ThrowIfNotConcurrentImplementation">
            <summary>Sets the Shim of PolicyRegistry.ThrowIfNotConcurrentImplementation()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.TryAddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Registry.PolicyRegistry,System.String,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryAdd(String key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.TryGetOf1StringM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{Polly.Registry.PolicyRegistry,System.String,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryGet(String key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.TryRemoveOf1StringM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{Polly.Registry.PolicyRegistry,System.String,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryRemove(String key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.AllInstances.TryUpdateOf1StringM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Registry.PolicyRegistry,System.String,``0,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryUpdate(String key, !!0 newPolicy, !!0 comparisonPolicy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.Bind(Polly.Registry.IConcurrentPolicyRegistry{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.Bind(Polly.Registry.IPolicyRegistry{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.Bind(Polly.Registry.IReadOnlyPolicyRegistry{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Polly.IsPolicy}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.Clear">
            <summary>Sets the Shim of PolicyRegistry.Clear()</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.Constructor">
            <summary>Sets the Shim of PolicyRegistry.PolicyRegistry()</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.ConstructorIDictionaryOfStringIsPolicy">
            <summary>Sets the Shim of PolicyRegistry.PolicyRegistry(IDictionary`2&lt;String,IsPolicy&gt; registry)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.ContainsKeyString">
            <summary>Sets the Shim of PolicyRegistry.ContainsKey(String key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.CountGet">
            <summary>Sets the Shim of PolicyRegistry.get_Count()</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.GetEnumerator">
            <summary>Sets the Shim of PolicyRegistry.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the Shim of PolicyRegistry.Get(String key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.GetOrAddOf1StringFuncOfStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Func{System.String,``0},``0})">
            <summary>Sets the Shim of PolicyRegistry.GetOrAdd(String key, Func`2&lt;String,!!0&gt; policyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.GetOrAddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,``0})">
            <summary>Sets the Shim of PolicyRegistry.GetOrAdd(String key, !!0 policy)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.ItemGetString">
            <summary>Sets the Shim of PolicyRegistry.get_Item(String key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.ItemSetStringIsPolicy">
            <summary>Sets the Shim of PolicyRegistry.set_Item(String key, IsPolicy value)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.RemoveString">
            <summary>Sets the Shim of PolicyRegistry.Remove(String key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the Shim of PolicyRegistry.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.ShimPolicyRegistry.ThrowIfNotConcurrentImplementation">
            <summary>Sets the Shim of PolicyRegistry.ThrowIfNotConcurrentImplementation()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.TryAddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryAdd(String key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.TryGetOf1StringM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{System.String,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryGet(String key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.TryRemoveOf1StringM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{System.String,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryRemove(String key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.ShimPolicyRegistry.TryUpdateOf1StringM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,``0,System.Boolean})">
            <summary>Sets the Shim of PolicyRegistry.TryUpdate(String key, !!0 newPolicy, !!0 comparisonPolicy)</summary>
        </member>
        <member name="T:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1">
            <summary>Stub type of Polly.Registry.IConcurrentPolicyRegistry`1</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.#ctor">
            <summary>Initializes a new instance of type StubIConcurrentPolicyRegistry</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.AddOf1T0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{`0,``0})">
            <summary>Sets stubs of Add(!0 key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.AddOrUpdateOf1T0FuncOfT0M0FuncOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,System.Func{`0,``0},System.Func{`0,``0,``0},``0})">
            <summary>Sets stubs of AddOrUpdate(!0 key, Func`2&lt;!0,!!0&gt; addPolicyFactory, Func`3&lt;!0,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.AddOrUpdateOf1T0M0FuncOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,``0,System.Func{`0,``0,``0},``0})">
            <summary>Sets stubs of AddOrUpdate(!0 key, !!0 addPolicy, Func`3&lt;!0,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Clear">
            <summary>Sets the stub of IPolicyRegistry`1.Clear()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.ContainsKeyT0">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Count">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Count()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.CountGet">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Count()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.GetOf1T0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,``0})">
            <summary>Sets stubs of Get(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.GetOrAddOf1T0FuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,System.Func{`0,``0},``0})">
            <summary>Sets stubs of GetOrAdd(!0 key, Func`2&lt;!0,!!0&gt; policyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.GetOrAddOf1T0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,``0,``0})">
            <summary>Sets stubs of GetOrAdd(!0 key, !!0 policy)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Item(`0)">
            <summary>Sets the stub of IPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Item(`0)">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.ItemGetT0">
            <summary>Sets the stub of IPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.ItemGetT001">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.ItemSetT0IsPolicy">
            <summary>Sets the stub of IPolicyRegistry`1.set_Item(!0 key, IsPolicy value)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IConcurrentPolicyRegistry{TKey}#AddOrUpdate``1(`0,``0,System.Func{`0,``0,``0})">
            <summary>Sets the Stub of IConcurrentPolicyRegistry`1.AddOrUpdate(!0 key, !!0 addPolicy, Func`3&lt;!0,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IConcurrentPolicyRegistry{TKey}#AddOrUpdate``1(`0,System.Func{`0,``0},System.Func{`0,``0,``0})">
            <summary>Sets the Stub of IConcurrentPolicyRegistry`1.AddOrUpdate(!0 key, Func`2&lt;!0,!!0&gt; addPolicyFactory, Func`3&lt;!0,!!0,!!0&gt; updatePolicyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IConcurrentPolicyRegistry{TKey}#GetOrAdd``1(`0,System.Func{`0,``0})">
            <summary>Sets the Stub of IConcurrentPolicyRegistry`1.GetOrAdd(!0 key, Func`2&lt;!0,!!0&gt; policyFactory)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IConcurrentPolicyRegistry{TKey}#GetOrAdd``1(`0,``0)">
            <summary>Sets the Stub of IConcurrentPolicyRegistry`1.GetOrAdd(!0 key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IConcurrentPolicyRegistry{TKey}#TryAdd``1(`0,``0)">
            <summary>Sets the Stub of IConcurrentPolicyRegistry`1.TryAdd(!0 key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IConcurrentPolicyRegistry{TKey}#TryRemove``1(`0,``0@)">
            <summary>Sets the Stub of IConcurrentPolicyRegistry`1.TryRemove(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IConcurrentPolicyRegistry{TKey}#TryUpdate``1(`0,``0,``0)">
            <summary>Sets the Stub of IConcurrentPolicyRegistry`1.TryUpdate(!0 key, !!0 newPolicy, !!0 comparisonPolicy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Add``1(`0,``0)">
            <summary>Sets the Stub of IPolicyRegistry`1.Add(!0 key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Clear">
            <summary>Sets the Stub of IPolicyRegistry`1.Clear()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Remove(`0)">
            <summary>Sets the Stub of IPolicyRegistry`1.Remove(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#ContainsKey(`0)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Get``1(`0)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.Get(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#TryGet``1(`0,``0@)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.TryGet(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.RemoveT0">
            <summary>Sets the stub of IPolicyRegistry`1.Remove(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,Polly#IsPolicy}}#GetEnumerator">
            <summary>Sets the Stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the Stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.TryAddOf1T0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,``0,System.Boolean})">
            <summary>Sets stubs of TryAdd(!0 key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.TryGetOf1T0M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{`0,``0,System.Boolean})">
            <summary>Sets stubs of TryGet(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.TryRemoveOf1T0M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{`0,``0,System.Boolean})">
            <summary>Sets stubs of TryRemove(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIConcurrentPolicyRegistry`1.TryUpdateOf1T0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,``0,``0,System.Boolean})">
            <summary>Sets stubs of TryUpdate(!0 key, !!0 newPolicy, !!0 comparisonPolicy)</summary>
        </member>
        <member name="T:Polly.Registry.Fakes.StubIPolicyRegistry`1">
            <summary>Stub type of Polly.Registry.IPolicyRegistry`1</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.#ctor">
            <summary>Initializes a new instance of type StubIPolicyRegistry</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.AddOf1T0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{`0,``0})">
            <summary>Sets stubs of Add(!0 key, !!0 policy)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.Clear">
            <summary>Sets the stub of IPolicyRegistry`1.Clear()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.ContainsKeyT0">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Count">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Count()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.CountGet">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Count()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.GetOf1T0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,``0})">
            <summary>Sets stubs of Get(!0 key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Item(`0)">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Item(`0)">
            <summary>Sets the stub of IPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.ItemGetT0">
            <summary>Sets the stub of IPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.ItemGetT001">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.ItemSetT0IsPolicy">
            <summary>Sets the stub of IPolicyRegistry`1.set_Item(!0 key, IsPolicy value)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Add``1(`0,``0)">
            <summary>Sets the Stub of IPolicyRegistry`1.Add(!0 key, !!0 policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Clear">
            <summary>Sets the Stub of IPolicyRegistry`1.Clear()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IPolicyRegistry{TKey}#Remove(`0)">
            <summary>Sets the Stub of IPolicyRegistry`1.Remove(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#ContainsKey(`0)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Get``1(`0)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.Get(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#TryGet``1(`0,``0@)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.TryGet(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIPolicyRegistry`1.RemoveT0">
            <summary>Sets the stub of IPolicyRegistry`1.Remove(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,Polly#IsPolicy}}#GetEnumerator">
            <summary>Sets the Stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the Stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIPolicyRegistry`1.TryGetOf1T0M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{`0,``0,System.Boolean})">
            <summary>Sets stubs of TryGet(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="T:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1">
            <summary>Stub type of Polly.Registry.IReadOnlyPolicyRegistry`1</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.#ctor">
            <summary>Initializes a new instance of type StubIReadOnlyPolicyRegistry</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.ContainsKeyT0">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Count">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Count()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.CountGet">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Count()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.GetOf1T0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{`0,``0})">
            <summary>Sets stubs of Get(!0 key)</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Item(`0)">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="F:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.ItemGetT0">
            <summary>Sets the stub of IReadOnlyPolicyRegistry`1.get_Item(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#ContainsKey(`0)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.ContainsKey(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#Get``1(`0)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.Get(!0 key)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.Polly#Registry#IReadOnlyPolicyRegistry{TKey}#TryGet``1(`0,``0@)">
            <summary>Sets the Stub of IReadOnlyPolicyRegistry`1.TryGet(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,Polly#IsPolicy}}#GetEnumerator">
            <summary>Sets the Stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the Stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubIReadOnlyPolicyRegistry`1.TryGetOf1T0M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{`0,``0,System.Boolean})">
            <summary>Sets stubs of TryGet(!0 key, !!0&amp; policy)</summary>
        </member>
        <member name="T:Polly.Registry.Fakes.StubPolicyRegistry">
            <summary>Stub type of Polly.Registry.PolicyRegistry</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubPolicyRegistry.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubPolicyRegistry.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Polly.Registry.Fakes.StubPolicyRegistry.InitializeStub">
            <summary>Initializes a new instance of type StubPolicyRegistry</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubPolicyRegistry.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Polly.Registry.Fakes.StubPolicyRegistry.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimAsyncRetryPolicy">
            <summary>Shim type of Polly.Retry.AsyncRetryPolicy</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.#ctor(Polly.Retry.AsyncRetryPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimAsyncRetryPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Retry.AsyncRetryPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncRetryPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.AllInstances._ImplementationAsyncb__5_0Of1Int32DelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Retry.AsyncRetryPolicy,System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan})">
            <summary>Sets the Shim of AsyncRetryPolicy.&lt;ImplementationAsync&gt;b__5_0(Int32 retryCount, DelegateResult`1&lt;!!0&gt; outcome, Context ctx)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.AllInstances._ImplementationAsyncb__5_1Of1DelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Retry.AsyncRetryPolicy,Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context,System.Threading.Tasks.Task})">
            <summary>Sets the Shim of AsyncRetryPolicy.&lt;ImplementationAsync&gt;b__5_1(DelegateResult`1&lt;!!0&gt; outcome, TimeSpan timespan, Int32 retryCount, Context ctx)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimAsyncRetryPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.Bind(Polly.Retry.IRetryPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimAsyncRetryPolicy.ConstructorPolicyBuilderFuncOfExceptionTimeSpanInt32ContextTaskInt32IEnumerableOfTimeSpanFuncOfInt32ExceptionContextTimeSpan">
            <summary>Sets the Shim of AsyncRetryPolicy.AsyncRetryPolicy(PolicyBuilder policyBuilder, Func`5&lt;Exception,TimeSpan,Int32,Context,Task&gt; onRetryAsync, Int32 permittedRetryCount, IEnumerable`1&lt;TimeSpan&gt; sleepDurationsEnumerable, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncRetryPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy._ImplementationAsyncb__5_0Of1Int32DelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan})">
            <summary>Sets the Shim of AsyncRetryPolicy.&lt;ImplementationAsync&gt;b__5_0(Int32 retryCount, DelegateResult`1&lt;!!0&gt; outcome, Context ctx)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy._ImplementationAsyncb__5_1Of1DelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context,System.Threading.Tasks.Task})">
            <summary>Sets the Shim of AsyncRetryPolicy.&lt;ImplementationAsync&gt;b__5_1(DelegateResult`1&lt;!!0&gt; outcome, TimeSpan timespan, Int32 retryCount, Context ctx)</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1">
            <summary>Shim type of Polly.Retry.AsyncRetryPolicy`1</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.#ctor(Polly.Retry.AsyncRetryPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncRetryPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.Bind(Polly.Retry.IRetryPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.Bind(Polly.Retry.IRetryPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.ConstructorPolicyBuilderOfT0FuncOfDelegateResultOfT0TimeSpanInt32ContextTaskInt32IEnumerableOfTimeSpanFuncOfInt32DelegateResultOfT0ContextTimeSpan">
            <summary>Sets the Shim of AsyncRetryPolicy`1.AsyncRetryPolicy`1(PolicyBuilder`1&lt;!0&gt; policyBuilder, Func`5&lt;DelegateResult`1&lt;!0&gt;,TimeSpan,Int32,Context,Task&gt; onRetryAsync, Int32 permittedRetryCount, IEnumerable`1&lt;TimeSpan&gt; sleepDurationsEnumerable, Func`4&lt;Int32,DelegateResult`1&lt;!0&gt;,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimAsyncRetryPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncRetryPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimRetryPolicy">
            <summary>Shim type of Polly.Retry.RetryPolicy</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.#ctor(Polly.Retry.RetryPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimRetryPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Retry.RetryPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of RetryPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.AllInstances._Implementationb__5_0Of1Int32DelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Retry.RetryPolicy,System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan})">
            <summary>Sets the Shim of RetryPolicy.&lt;Implementation&gt;b__5_0(Int32 retryCount, DelegateResult`1&lt;!!0&gt; outcome, Context ctx)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.AllInstances._Implementationb__5_1Of1DelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Polly.Retry.RetryPolicy,Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context})">
            <summary>Sets the Shim of RetryPolicy.&lt;Implementation&gt;b__5_1(DelegateResult`1&lt;!!0&gt; outcome, TimeSpan timespan, Int32 retryCount, Context ctx)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimRetryPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.Bind(Polly.Retry.IRetryPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimRetryPolicy.ConstructorPolicyBuilderActionOfExceptionTimeSpanInt32ContextInt32IEnumerableOfTimeSpanFuncOfInt32ExceptionContextTimeSpan">
            <summary>Sets the Shim of RetryPolicy.RetryPolicy(PolicyBuilder policyBuilder, Action`4&lt;Exception,TimeSpan,Int32,Context&gt; onRetry, Int32 permittedRetryCount, IEnumerable`1&lt;TimeSpan&gt; sleepDurationsEnumerable, Func`4&lt;Int32,Exception,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of RetryPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy._Implementationb__5_0Of1Int32DelegateResultOfM0Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,Polly.DelegateResult{``0},Polly.Context,System.TimeSpan})">
            <summary>Sets the Shim of RetryPolicy.&lt;Implementation&gt;b__5_0(Int32 retryCount, DelegateResult`1&lt;!!0&gt; outcome, Context ctx)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy._Implementationb__5_1Of1DelegateResultOfM0TimeSpanInt32Context``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Polly.DelegateResult{``0},System.TimeSpan,System.Int32,Polly.Context})">
            <summary>Sets the Shim of RetryPolicy.&lt;Implementation&gt;b__5_1(DelegateResult`1&lt;!!0&gt; outcome, TimeSpan timespan, Int32 retryCount, Context ctx)</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimRetryPolicy`1">
            <summary>Shim type of Polly.Retry.RetryPolicy`1</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.#ctor(Polly.Retry.RetryPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.ShimRetryPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimRetryPolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of RetryPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimRetryPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.Bind(Polly.Retry.IRetryPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.ShimRetryPolicy`1.Bind(Polly.Retry.IRetryPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimRetryPolicy`1.ConstructorPolicyBuilderOfT0ActionOfDelegateResultOfT0TimeSpanInt32ContextInt32IEnumerableOfTimeSpanFuncOfInt32DelegateResultOfT0ContextTimeSpan">
            <summary>Sets the Shim of RetryPolicy`1.RetryPolicy`1(PolicyBuilder`1&lt;!0&gt; policyBuilder, Action`4&lt;DelegateResult`1&lt;!0&gt;,TimeSpan,Int32,Context&gt; onRetry, Int32 permittedRetryCount, IEnumerable`1&lt;TimeSpan&gt; sleepDurationsEnumerable, Func`4&lt;Int32,DelegateResult`1&lt;!0&gt;,Context,TimeSpan&gt; sleepDurationProvider)</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.ShimRetryPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of RetryPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.StubIRetryPolicy">
            <summary>Stub type of Polly.Retry.IRetryPolicy</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.StubIRetryPolicy.#ctor">
            <summary>Initializes a new instance of type StubIRetryPolicy</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.StubIRetryPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Retry.Fakes.StubIRetryPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Retry.Fakes.StubIRetryPolicy`1">
            <summary>Stub type of Polly.Retry.IRetryPolicy`1</summary>
        </member>
        <member name="M:Polly.Retry.Fakes.StubIRetryPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubIRetryPolicy</summary>
        </member>
        <member name="P:Polly.Retry.Fakes.StubIRetryPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Retry.Fakes.StubIRetryPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy">
            <summary>Shim type of Polly.Timeout.AsyncTimeoutPolicy</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.#ctor(Polly.Timeout.AsyncTimeoutPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Timeout.AsyncTimeoutPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncTimeoutPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.Bind(Polly.Timeout.ITimeoutPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.ConstructorFuncOfContextTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of AsyncTimeoutPolicy.AsyncTimeoutPolicy(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncTimeoutPolicy.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1">
            <summary>Shim type of Polly.Timeout.AsyncTimeoutPolicy`1</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.#ctor(Polly.Timeout.AsyncTimeoutPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncTimeoutPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.Bind(Polly.Timeout.ITimeoutPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.Bind(Polly.Timeout.ITimeoutPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.ConstructorFuncOfContextTimeSpanTimeoutStrategyFuncOfContextTimeSpanTaskExceptionTask">
            <summary>Sets the Shim of AsyncTimeoutPolicy`1.AsyncTimeoutPolicy`1(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Func`5&lt;Context,TimeSpan,Task,Exception,Task&gt; onTimeoutAsync)</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimAsyncTimeoutPolicy`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncTimeoutPolicy`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimTimeoutPolicy">
            <summary>Shim type of Polly.Timeout.TimeoutPolicy</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.#ctor(Polly.Timeout.TimeoutPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimTimeoutPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Timeout.TimeoutPolicy,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of TimeoutPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimTimeoutPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.Bind(Polly.Timeout.ITimeoutPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimTimeoutPolicy.ConstructorFuncOfContextTimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of TimeoutPolicy.TimeoutPolicy(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of TimeoutPolicy.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimTimeoutPolicy`1">
            <summary>Shim type of Polly.Timeout.TimeoutPolicy`1</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.#ctor(Polly.Timeout.TimeoutPolicy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of TimeoutPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.Bind(Polly.Timeout.ITimeoutPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.Bind(Polly.Timeout.ITimeoutPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.ConstructorFuncOfContextTimeSpanTimeoutStrategyActionOfContextTimeSpanTaskException">
            <summary>Sets the Shim of TimeoutPolicy`1.TimeoutPolicy`1(Func`2&lt;Context,TimeSpan&gt; timeoutProvider, TimeoutStrategy timeoutStrategy, Action`4&lt;Context,TimeSpan,Task,Exception&gt; onTimeout)</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.ShimTimeoutPolicy`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of TimeoutPolicy`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.StubITimeoutPolicy">
            <summary>Stub type of Polly.Timeout.ITimeoutPolicy</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.StubITimeoutPolicy.#ctor">
            <summary>Initializes a new instance of type StubITimeoutPolicy</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.StubITimeoutPolicy.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Timeout.Fakes.StubITimeoutPolicy.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Timeout.Fakes.StubITimeoutPolicy`1">
            <summary>Stub type of Polly.Timeout.ITimeoutPolicy`1</summary>
        </member>
        <member name="M:Polly.Timeout.Fakes.StubITimeoutPolicy`1.#ctor">
            <summary>Initializes a new instance of type StubITimeoutPolicy</summary>
        </member>
        <member name="P:Polly.Timeout.Fakes.StubITimeoutPolicy`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Timeout.Fakes.StubITimeoutPolicy`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Utilities.Fakes.ShimExceptionExtensions">
            <summary>Shim type of Polly.Utilities.ExceptionExtensions</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimExceptionExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimExceptionExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimExceptionExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Utilities.Fakes.ShimExceptionExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Utilities.Fakes.ShimExceptionExtensions.RethrowWithOriginalStackTraceIfDiffersFromExceptionException">
            <summary>Sets the Shim of ExceptionExtensions.RethrowWithOriginalStackTraceIfDiffersFrom(Exception exceptionPossiblyToThrow, Exception exceptionToCompare)</summary>
        </member>
        <member name="T:Polly.Utilities.Fakes.ShimSystemClock">
            <summary>Shim type of Polly.Utilities.SystemClock</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimSystemClock.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimSystemClock.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimSystemClock.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Utilities.Fakes.ShimSystemClock.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Utilities.Fakes.ShimSystemClock.Reset">
            <summary>Sets the Shim of SystemClock.Reset()</summary>
        </member>
        <member name="P:Polly.Utilities.Fakes.ShimSystemClock.StaticConstructor">
            <summary>Sets the Shim of SystemClock.SystemClock()</summary>
        </member>
        <member name="T:Polly.Utilities.Fakes.ShimTaskHelper">
            <summary>Shim type of Polly.Utilities.TaskHelper</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimTaskHelper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimTaskHelper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Utilities.Fakes.ShimTaskHelper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Utilities.Fakes.ShimTaskHelper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Utilities.Fakes.ShimTaskHelper.StaticConstructor">
            <summary>Sets the Shim of TaskHelper.TaskHelper()</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimAsyncPolicyWrap">
            <summary>Shim type of Polly.Wrap.AsyncPolicyWrap</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.#ctor(Polly.Wrap.AsyncPolicyWrap)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicyWrap.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.AllInstances.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Wrap.AsyncPolicyWrap,System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicyWrap.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.AllInstances.InnerGet">
            <summary>Sets the Shim of AsyncPolicyWrap.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.AllInstances.OuterGet">
            <summary>Sets the Shim of AsyncPolicyWrap.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.AllInstances.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of AsyncPolicyWrap.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.Bind(Polly.IAsyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.Bind(Polly.Wrap.IPolicyWrap)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.ConstructorAsyncPolicyIAsyncPolicy">
            <summary>Sets the Shim of AsyncPolicyWrap.AsyncPolicyWrap(AsyncPolicy outer, IAsyncPolicy inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.ImplementationAsyncFuncOfContextCancellationTokenTaskContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicyWrap.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.ImplementationAsyncOf1FuncOfContextCancellationTokenTaskOfM0ContextCancellationTokenBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the Shim of AsyncPolicyWrap.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.InnerGet">
            <summary>Sets the Shim of AsyncPolicyWrap.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.OuterGet">
            <summary>Sets the Shim of AsyncPolicyWrap.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of AsyncPolicyWrap.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1">
            <summary>Shim type of Polly.Wrap.AsyncPolicyWrap`1</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.#ctor(Polly.Wrap.AsyncPolicyWrap{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.AllInstances.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicyWrap`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.AllInstances.InnerGet">
            <summary>Sets the Shim of AsyncPolicyWrap`1.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.AllInstances.OuterGet">
            <summary>Sets the Shim of AsyncPolicyWrap`1.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.AllInstances.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of AsyncPolicyWrap`1.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.Bind(Polly.IAsyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.Bind(Polly.Wrap.IPolicyWrap)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.Bind(Polly.Wrap.IPolicyWrap{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.ConstructorAsyncPolicyIAsyncPolicyOfT0">
            <summary>Sets the Shim of AsyncPolicyWrap`1.AsyncPolicyWrap`1(AsyncPolicy outer, IAsyncPolicy`1&lt;!0&gt; inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.ConstructorAsyncPolicyOfT0IAsyncPolicy">
            <summary>Sets the Shim of AsyncPolicyWrap`1.AsyncPolicyWrap`1(AsyncPolicy`1&lt;!0&gt; outer, IAsyncPolicy inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.ConstructorAsyncPolicyOfT0IAsyncPolicyOfT0">
            <summary>Sets the Shim of AsyncPolicyWrap`1.AsyncPolicyWrap`1(AsyncPolicy`1&lt;!0&gt; outer, IAsyncPolicy`1&lt;!0&gt; inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.ImplementationAsyncFuncOfContextCancellationTokenTaskOfT0ContextCancellationTokenBoolean">
            <summary>Sets the Shim of AsyncPolicyWrap`1.ImplementationAsync(Func`3&lt;Context,CancellationToken,Task`1&lt;!0&gt;&gt; action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.InnerGet">
            <summary>Sets the Shim of AsyncPolicyWrap`1.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.OuterGet">
            <summary>Sets the Shim of AsyncPolicyWrap`1.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimAsyncPolicyWrap`1.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of AsyncPolicyWrap`1.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimIPolicyWrapExtension">
            <summary>Shim type of Polly.Wrap.IPolicyWrapExtension</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.GetPoliciesIPolicyWrap">
            <summary>Sets the Shim of IPolicyWrapExtension.GetPolicies(IPolicyWrap policyWrap)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.GetPoliciesOf1IPolicyWrap``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Wrap.IPolicyWrap,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the Shim of IPolicyWrapExtension.GetPolicies(IPolicyWrap policyWrap)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.GetPoliciesOf1IPolicyWrapFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Wrap.IPolicyWrap,System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the Shim of IPolicyWrapExtension.GetPolicies(IPolicyWrap policyWrap, Func`2&lt;!!0,Boolean&gt; filter)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.GetPolicyOf1IPolicyWrap``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Wrap.IPolicyWrap,``0})">
            <summary>Sets the Shim of IPolicyWrapExtension.GetPolicy(IPolicyWrap policyWrap)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimIPolicyWrapExtension.GetPolicyOf1IPolicyWrapFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Wrap.IPolicyWrap,System.Func{``0,System.Boolean},``0})">
            <summary>Sets the Shim of IPolicyWrapExtension.GetPolicy(IPolicyWrap policyWrap, Func`2&lt;!!0,Boolean&gt; filter)</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimPolicyWrap">
            <summary>Shim type of Polly.Wrap.PolicyWrap</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.#ctor(Polly.Wrap.PolicyWrap)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimPolicyWrap.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.AllInstances.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of PolicyWrap.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.AllInstances.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Polly.Wrap.PolicyWrap,System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of PolicyWrap.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.AllInstances.InnerGet">
            <summary>Sets the Shim of PolicyWrap.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.AllInstances.OuterGet">
            <summary>Sets the Shim of PolicyWrap.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.AllInstances.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of PolicyWrap.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.Bind(Polly.ISyncPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.Bind(Polly.Wrap.IPolicyWrap)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.ConstructorPolicyISyncPolicy">
            <summary>Sets the Shim of PolicyWrap.PolicyWrap(Policy outer, ISyncPolicy inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.ImplementationActionOfContextCancellationTokenContextCancellationToken">
            <summary>Sets the Shim of PolicyWrap.Implementation(Action`2&lt;Context,CancellationToken&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap.ImplementationOf1FuncOfContextCancellationTokenM0ContextCancellationToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken,``0})">
            <summary>Sets the Shim of PolicyWrap.Implementation(Func`3&lt;Context,CancellationToken,!!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.InnerGet">
            <summary>Sets the Shim of PolicyWrap.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.OuterGet">
            <summary>Sets the Shim of PolicyWrap.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of PolicyWrap.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimPolicyWrap`1">
            <summary>Shim type of Polly.Wrap.PolicyWrap`1</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.#ctor(Polly.Wrap.PolicyWrap{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.ShimPolicyWrap`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.AllInstances.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of PolicyWrap`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.AllInstances.InnerGet">
            <summary>Sets the Shim of PolicyWrap`1.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.AllInstances.OuterGet">
            <summary>Sets the Shim of PolicyWrap`1.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.AllInstances.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of PolicyWrap`1.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.Bind(Polly.IsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.Bind(Polly.ISyncPolicy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.Bind(Polly.Wrap.IPolicyWrap)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.ShimPolicyWrap`1.Bind(Polly.Wrap.IPolicyWrap{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.ConstructorPolicyISyncPolicyOfT0">
            <summary>Sets the Shim of PolicyWrap`1.PolicyWrap`1(Policy outer, ISyncPolicy`1&lt;!0&gt; inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.ConstructorPolicyOfT0ISyncPolicy">
            <summary>Sets the Shim of PolicyWrap`1.PolicyWrap`1(Policy`1&lt;!0&gt; outer, ISyncPolicy inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.ConstructorPolicyOfT0ISyncPolicyOfT0">
            <summary>Sets the Shim of PolicyWrap`1.PolicyWrap`1(Policy`1&lt;!0&gt; outer, ISyncPolicy`1&lt;!0&gt; inner)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.ImplementationFuncOfContextCancellationTokenT0ContextCancellationToken">
            <summary>Sets the Shim of PolicyWrap`1.Implementation(Func`3&lt;Context,CancellationToken,!0&gt; action, Context context, CancellationToken cancellationToken)</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.InnerGet">
            <summary>Sets the Shim of PolicyWrap`1.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.OuterGet">
            <summary>Sets the Shim of PolicyWrap`1.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.ShimPolicyWrap`1.SetPolicyContextContextStringOutStringOut">
            <summary>Sets the Shim of PolicyWrap`1.SetPolicyContext(Context executionContext, String&amp; priorPolicyWrapKey, String&amp; priorPolicyKey)</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.StubIPolicyWrap">
            <summary>Stub type of Polly.Wrap.IPolicyWrap</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.StubIPolicyWrap.#ctor">
            <summary>Initializes a new instance of type StubIPolicyWrap</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.StubIPolicyWrap.Polly#Wrap#IPolicyWrap#Inner">
            <summary>Sets the stub of IPolicyWrap.get_Inner()</summary>
        </member>
        <member name="F:Polly.Wrap.Fakes.StubIPolicyWrap.InnerGet">
            <summary>Sets the stub of IPolicyWrap.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.StubIPolicyWrap.Polly#Wrap#IPolicyWrap#Outer">
            <summary>Sets the stub of IPolicyWrap.get_Outer()</summary>
        </member>
        <member name="F:Polly.Wrap.Fakes.StubIPolicyWrap.OuterGet">
            <summary>Sets the stub of IPolicyWrap.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.StubIPolicyWrap.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Wrap.Fakes.StubIPolicyWrap.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="T:Polly.Wrap.Fakes.StubIPolicyWrap`1">
            <summary>Stub type of Polly.Wrap.IPolicyWrap`1</summary>
        </member>
        <member name="M:Polly.Wrap.Fakes.StubIPolicyWrap`1.#ctor">
            <summary>Initializes a new instance of type StubIPolicyWrap</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.StubIPolicyWrap`1.Polly#Wrap#IPolicyWrap#Inner">
            <summary>Sets the stub of IPolicyWrap.get_Inner()</summary>
        </member>
        <member name="F:Polly.Wrap.Fakes.StubIPolicyWrap`1.InnerGet">
            <summary>Sets the stub of IPolicyWrap.get_Inner()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.StubIPolicyWrap`1.Polly#Wrap#IPolicyWrap#Outer">
            <summary>Sets the stub of IPolicyWrap.get_Outer()</summary>
        </member>
        <member name="F:Polly.Wrap.Fakes.StubIPolicyWrap`1.OuterGet">
            <summary>Sets the stub of IPolicyWrap.get_Outer()</summary>
        </member>
        <member name="P:Polly.Wrap.Fakes.StubIPolicyWrap`1.Polly#IsPolicy#PolicyKey">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
        <member name="F:Polly.Wrap.Fakes.StubIPolicyWrap`1.PolicyKeyGet">
            <summary>Sets the stub of IsPolicy.get_PolicyKey()</summary>
        </member>
    </members>
</doc>
